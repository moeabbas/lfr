
Line Follower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001218  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007c  00800060  00001218  000012ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  008000dc  008000dc  00001328  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024d2  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c95  00000000  00000000  00003baa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d30  00000000  00000000  0000483f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000824  00000000  00000000  00005570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007fc  00000000  00000000  00005d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014d2  00000000  00000000  00006590  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  00007a62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__vector_1>
       8:	0c 94 00 06 	jmp	0xc00	; 0xc00 <__vector_2>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__vector_4>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__vector_10>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_13>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	4d 04       	cpc	r4, r13
      56:	5a 04       	cpc	r5, r10
      58:	68 04       	cpc	r6, r8
      5a:	76 04       	cpc	r7, r6
      5c:	84 04       	cpc	r8, r4
      5e:	92 04       	cpc	r9, r2
      60:	a0 04       	cpc	r10, r0

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e8 e1       	ldi	r30, 0x18	; 24
      76:	f2 e1       	ldi	r31, 0x12	; 18
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	ac 3d       	cpi	r26, 0xDC	; 220
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	21 e0       	ldi	r18, 0x01	; 1
      86:	ac ed       	ldi	r26, 0xDC	; 220
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a0 31       	cpi	r26, 0x10	; 16
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <main>
      98:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <AdcConvert>:
// Input: channel number, 0..7
// Return: 10 bit result, 0..1023 
/******************************************************************************/
uint16_t AdcConvert (uint8_t channel)
{
	ADMUX = (1<<REFS0) | channel; // use AVcc+ ref with capacitor, select channel
      a0:	80 64       	ori	r24, 0x40	; 64
      a2:	87 b9       	out	0x07, r24	; 7
   
	ADCSRA |= (1<<ADSC);
      a4:	36 9a       	sbi	0x06, 6	; 6
   
	while (ADCSRA & (1<<ADSC))
      a6:	36 99       	sbic	0x06, 6	; 6
      a8:	fe cf       	rjmp	.-4      	; 0xa6 <AdcConvert+0x6>
	{
		// Waiting for conversion complete
	};    
   
   return ADC; // Return 16 bit ADC value
      aa:	84 b1       	in	r24, 0x04	; 4
      ac:	95 b1       	in	r25, 0x05	; 5
}
      ae:	08 95       	ret

000000b0 <AdcInit>:
// Input: 
// Return: 
/******************************************************************************/
void AdcInit (void)
{
   ADCSRA = 0x87;                   // enable ADC, clear EOC-flag, set clock div.
      b0:	87 e8       	ldi	r24, 0x87	; 135
      b2:	86 b9       	out	0x06, r24	; 6
   ADCSRA |= _BV(ADEN); 
      b4:	37 9a       	sbi	0x06, 7	; 6
      b6:	08 95       	ret

000000b8 <USARTInit>:
				setDutyCycleMotorR(0);
			}	
		
			if(ReceivedByte=='q'){
				setDutyCycleMotorL(0);
				setDutyCycleMotorR(0);
      b8:	89 b9       	out	0x09, r24	; 9
				bluetoothFlag=0;
			}	
	}

	LCDGotoXY(0,0);
      ba:	90 bd       	out	0x20, r25	; 32
      bc:	86 e8       	ldi	r24, 0x86	; 134
      be:	80 bd       	out	0x20, r24	; 32
      c0:	88 e1       	ldi	r24, 0x18	; 24
	LCDPutString("Bluetooth test");
      c2:	8a b9       	out	0x0a, r24	; 10
      c4:	57 9a       	sbi	0x0a, 7	; 10
      c6:	78 94       	sei
      c8:	08 95       	ret

000000ca <__vector_13>:
      ca:	1f 92       	push	r1
			if(ReceivedByte=='s'){
				setDutyCycleMotorL(0);
				setDutyCycleMotorR(0);
			}	
		
			if(ReceivedByte=='q'){
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	8f 93       	push	r24
      d6:	8c b1       	in	r24, 0x0c	; 12
/////////////////////////////////////////////////////////////

ISR(USART_RXC_vect)
	{
	// Fetch the received byte value into the variable " ByteReceived "
	ReceivedByte = UDR;
      d8:	80 93 f3 00 	sts	0x00F3, r24
	//UDR = ReceivedByte;
	//UDR = 13;
	}
      dc:	8f 91       	pop	r24
      de:	0f 90       	pop	r0
      e0:	0f be       	out	0x3f, r0	; 63
      e2:	0f 90       	pop	r0
      e4:	1f 90       	pop	r1
      e6:	18 95       	reti

000000e8 <ADCReadButton>:
// Input:
// Return: char
/******************************************************************************/
char ADCReadButton(void)
{
	uint16_t keyboardVoltage = (int16_t)AdcConvert(0);	// get ADC value from channel ADC0
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	0e 94 50 00 	call	0xa0	; 0xa0 <AdcConvert>
	const int maxUpButtonVoltage = 300;
	const int maxDownButtonVoltage = 500;
	const int maxLeftButtonVoltage = 700;
	const int maxCentralButtonVoltage = 900;
	
	if (keyboardVoltage < maxRightButtonVoltage)
      ee:	84 36       	cpi	r24, 0x64	; 100
      f0:	91 05       	cpc	r25, r1
      f2:	88 f0       	brcs	.+34     	; 0x116 <ADCReadButton+0x2e>
	{
		return rightButton;
	}
	else if (keyboardVoltage < maxUpButtonVoltage)
      f4:	8c 32       	cpi	r24, 0x2C	; 44
      f6:	21 e0       	ldi	r18, 0x01	; 1
      f8:	92 07       	cpc	r25, r18
      fa:	78 f0       	brcs	.+30     	; 0x11a <ADCReadButton+0x32>
	{
		return upButton;
	}
	else if (keyboardVoltage < maxDownButtonVoltage)
      fc:	84 3f       	cpi	r24, 0xF4	; 244
      fe:	21 e0       	ldi	r18, 0x01	; 1
     100:	92 07       	cpc	r25, r18
     102:	68 f0       	brcs	.+26     	; 0x11e <ADCReadButton+0x36>
	{
		return downButton;
	}
	else if (keyboardVoltage < maxLeftButtonVoltage)
     104:	8c 3b       	cpi	r24, 0xBC	; 188
     106:	22 e0       	ldi	r18, 0x02	; 2
     108:	92 07       	cpc	r25, r18
     10a:	58 f0       	brcs	.+22     	; 0x122 <ADCReadButton+0x3a>
	{
		return leftButton;
	}
	else if (keyboardVoltage < maxCentralButtonVoltage)
     10c:	84 38       	cpi	r24, 0x84	; 132
     10e:	93 40       	sbci	r25, 0x03	; 3
     110:	50 f0       	brcs	.+20     	; 0x126 <ADCReadButton+0x3e>
	{
		return centralButton;
	}
	else
	{
		return noButton;
     112:	85 e3       	ldi	r24, 0x35	; 53
     114:	08 95       	ret
	const int maxLeftButtonVoltage = 700;
	const int maxCentralButtonVoltage = 900;
	
	if (keyboardVoltage < maxRightButtonVoltage)
	{
		return rightButton;
     116:	80 e3       	ldi	r24, 0x30	; 48
     118:	08 95       	ret
	}
	else if (keyboardVoltage < maxUpButtonVoltage)
	{
		return upButton;
     11a:	81 e3       	ldi	r24, 0x31	; 49
     11c:	08 95       	ret
	}
	else if (keyboardVoltage < maxDownButtonVoltage)
	{
		return downButton;
     11e:	82 e3       	ldi	r24, 0x32	; 50
     120:	08 95       	ret
	}
	else if (keyboardVoltage < maxLeftButtonVoltage)
	{
		return leftButton;
     122:	83 e3       	ldi	r24, 0x33	; 51
     124:	08 95       	ret
	}
	else if (keyboardVoltage < maxCentralButtonVoltage)
	{
		return centralButton;
     126:	84 e3       	ldi	r24, 0x34	; 52
	}
	else
	{
		return noButton;
	}
}
     128:	08 95       	ret

0000012a <getButton>:
char getButton(void)
{
	static char last = noButton;
	char temp, now;

	now = ADCReadButton();          // read the present input
     12a:	0e 94 74 00 	call	0xe8	; 0xe8 <ADCReadButton>
     12e:	98 2f       	mov	r25, r24
	if (now == last)                // test for two subsequent equal inputs
     130:	80 91 60 00 	lds	r24, 0x0060
     134:	98 13       	cpse	r25, r24
		return now;
	}
	else
	{
		temp = last;                 // if new: store new and return the last stable
		last = now;
     136:	90 93 60 00 	sts	0x0060, r25
		return temp;
	}
}
     13a:	08 95       	ret

0000013c <buttonReleased>:
		return false;
	}
}
bool buttonReleased(void)
{
	char button = getButton();
     13c:	0e 94 95 00 	call	0x12a	; 0x12a <getButton>
	if(button==noButton)
     140:	91 e0       	ldi	r25, 0x01	; 1
     142:	85 33       	cpi	r24, 0x35	; 53
     144:	09 f0       	breq	.+2      	; 0x148 <buttonReleased+0xc>
     146:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return false;
	}
}
     148:	89 2f       	mov	r24, r25
     14a:	08 95       	ret

0000014c <LcdTask>:
	}
}

void LcdTask (void)
{
	LCDClear();
     14c:	0e 94 cc 02 	call	0x598	; 0x598 <LCDClear>
	LCDGotoXY(0,0);
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCDGotoXY>
	LCDPutString(menuStr1);
     158:	82 e0       	ldi	r24, 0x02	; 2
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	0e 94 23 03 	call	0x646	; 0x646 <LCDPutString>
	LCDGotoXY(0,1);
     160:	61 e0       	ldi	r22, 0x01	; 1
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCDGotoXY>
	LCDPutString(menuStr2);
     168:	84 ef       	ldi	r24, 0xF4	; 244
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	0e 94 23 03 	call	0x646	; 0x646 <LCDPutString>
	LCDGotoXY(15,0);
     170:	60 e0       	ldi	r22, 0x00	; 0
     172:	8f e0       	ldi	r24, 0x0F	; 15
     174:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCDGotoXY>
	LCDPutChar(1);	// display the up arrow
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCDPutChar>
	LCDGotoXY(15,1);
     17e:	61 e0       	ldi	r22, 0x01	; 1
     180:	8f e0       	ldi	r24, 0x0F	; 15
     182:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCDGotoXY>
	LCDPutChar(0);	// display the down arrow
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCDPutChar>
     18c:	08 95       	ret

0000018e <subMenuRight>:
		return false;
	}
}

void subMenuRight(void)
{
     18e:	0f 93       	push	r16
     190:	1f 93       	push	r17
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
	char subButton = getButton();
     196:	0e 94 95 00 	call	0x12a	; 0x12a <getButton>
     19a:	c8 2f       	mov	r28, r24
	
	sprintf(menuStr1, "Adjust kp");
     19c:	9a e0       	ldi	r25, 0x0A	; 10
     19e:	e9 e7       	ldi	r30, 0x79	; 121
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	a2 e0       	ldi	r26, 0x02	; 2
     1a4:	b1 e0       	ldi	r27, 0x01	; 1
     1a6:	01 90       	ld	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	9a 95       	dec	r25
     1ac:	e1 f7       	brne	.-8      	; 0x1a6 <subMenuRight+0x18>
	sprintf(menuStr2,"kp = %03d", kp);
     1ae:	80 91 63 00 	lds	r24, 0x0063
     1b2:	1f 92       	push	r1
     1b4:	8f 93       	push	r24
     1b6:	23 e8       	ldi	r18, 0x83	; 131
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	3f 93       	push	r19
     1bc:	2f 93       	push	r18
     1be:	24 ef       	ldi	r18, 0xF4	; 244
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	3f 93       	push	r19
     1c4:	2f 93       	push	r18
     1c6:	0e 94 32 06 	call	0xc64	; 0xc64 <sprintf>
	
	LcdTask();
     1ca:	0e 94 a6 00 	call	0x14c	; 0x14c <LcdTask>
	while(subButton!= centralButton)
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	0f 90       	pop	r0
     1d4:	0f 90       	pop	r0
     1d6:	0f 90       	pop	r0
     1d8:	0f 90       	pop	r0
     1da:	c4 33       	cpi	r28, 0x34	; 52
     1dc:	09 f4       	brne	.+2      	; 0x1e0 <subMenuRight+0x52>
     1de:	40 c0       	rjmp	.+128    	; 0x260 <subMenuRight+0xd2>
		subButton = getButton();
		if(subButton == upButton)
		{
			while(!buttonReleased());
			kp+=1;
			sprintf(menuStr2,"kp = %03d", kp);
     1e0:	03 e8       	ldi	r16, 0x83	; 131
     1e2:	10 e0       	ldi	r17, 0x00	; 0
     1e4:	c4 ef       	ldi	r28, 0xF4	; 244
     1e6:	d0 e0       	ldi	r29, 0x00	; 0
	sprintf(menuStr2,"kp = %03d", kp);
	
	LcdTask();
	while(subButton!= centralButton)
	{
		subButton = getButton();
     1e8:	0e 94 95 00 	call	0x12a	; 0x12a <getButton>
		if(subButton == upButton)
     1ec:	81 33       	cpi	r24, 0x31	; 49
     1ee:	d1 f4       	brne	.+52     	; 0x224 <subMenuRight+0x96>
		{
			while(!buttonReleased());
     1f0:	0e 94 9e 00 	call	0x13c	; 0x13c <buttonReleased>
     1f4:	88 23       	and	r24, r24
     1f6:	e1 f3       	breq	.-8      	; 0x1f0 <subMenuRight+0x62>
			kp+=1;
     1f8:	80 91 63 00 	lds	r24, 0x0063
     1fc:	8f 5f       	subi	r24, 0xFF	; 255
     1fe:	80 93 63 00 	sts	0x0063, r24
			sprintf(menuStr2,"kp = %03d", kp);
     202:	1f 92       	push	r1
     204:	8f 93       	push	r24
     206:	1f 93       	push	r17
     208:	0f 93       	push	r16
     20a:	df 93       	push	r29
     20c:	cf 93       	push	r28
     20e:	0e 94 32 06 	call	0xc64	; 0xc64 <sprintf>
			LcdTask();
     212:	0e 94 a6 00 	call	0x14c	; 0x14c <LcdTask>
     216:	0f 90       	pop	r0
     218:	0f 90       	pop	r0
     21a:	0f 90       	pop	r0
     21c:	0f 90       	pop	r0
     21e:	0f 90       	pop	r0
     220:	0f 90       	pop	r0
     222:	e2 cf       	rjmp	.-60     	; 0x1e8 <subMenuRight+0x5a>
		}
		else if(subButton == downButton)
     224:	82 33       	cpi	r24, 0x32	; 50
     226:	d1 f4       	brne	.+52     	; 0x25c <subMenuRight+0xce>
		{
			while(!buttonReleased());
     228:	0e 94 9e 00 	call	0x13c	; 0x13c <buttonReleased>
     22c:	88 23       	and	r24, r24
     22e:	e1 f3       	breq	.-8      	; 0x228 <subMenuRight+0x9a>
			kp-=1;
     230:	80 91 63 00 	lds	r24, 0x0063
     234:	81 50       	subi	r24, 0x01	; 1
     236:	80 93 63 00 	sts	0x0063, r24
			sprintf(menuStr2,"kp = %03d", kp);
     23a:	1f 92       	push	r1
     23c:	8f 93       	push	r24
     23e:	1f 93       	push	r17
     240:	0f 93       	push	r16
     242:	df 93       	push	r29
     244:	cf 93       	push	r28
     246:	0e 94 32 06 	call	0xc64	; 0xc64 <sprintf>
			LcdTask();
     24a:	0e 94 a6 00 	call	0x14c	; 0x14c <LcdTask>
     24e:	0f 90       	pop	r0
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	0f 90       	pop	r0
     256:	0f 90       	pop	r0
     258:	0f 90       	pop	r0
     25a:	c6 cf       	rjmp	.-116    	; 0x1e8 <subMenuRight+0x5a>
	
	sprintf(menuStr1, "Adjust kp");
	sprintf(menuStr2,"kp = %03d", kp);
	
	LcdTask();
	while(subButton!= centralButton)
     25c:	84 33       	cpi	r24, 0x34	; 52
     25e:	21 f6       	brne	.-120    	; 0x1e8 <subMenuRight+0x5a>
			kp-=1;
			sprintf(menuStr2,"kp = %03d", kp);
			LcdTask();
		}
	}
}
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	1f 91       	pop	r17
     266:	0f 91       	pop	r16
     268:	08 95       	ret

0000026a <subMenuLeft>:
void subMenuLeft(void)
{
     26a:	0f 93       	push	r16
     26c:	1f 93       	push	r17
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
	char subButton = getButton();
     272:	0e 94 95 00 	call	0x12a	; 0x12a <getButton>
     276:	c8 2f       	mov	r28, r24
	sprintf(menuStr1, "Adjust ki");
     278:	9a e0       	ldi	r25, 0x0A	; 10
     27a:	ed e8       	ldi	r30, 0x8D	; 141
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	a2 e0       	ldi	r26, 0x02	; 2
     280:	b1 e0       	ldi	r27, 0x01	; 1
     282:	01 90       	ld	r0, Z+
     284:	0d 92       	st	X+, r0
     286:	9a 95       	dec	r25
     288:	e1 f7       	brne	.-8      	; 0x282 <subMenuLeft+0x18>
	sprintf(menuStr2,"ki = %03d", ki);
     28a:	80 91 62 00 	lds	r24, 0x0062
     28e:	1f 92       	push	r1
     290:	8f 93       	push	r24
     292:	27 e9       	ldi	r18, 0x97	; 151
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	3f 93       	push	r19
     298:	2f 93       	push	r18
     29a:	24 ef       	ldi	r18, 0xF4	; 244
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	3f 93       	push	r19
     2a0:	2f 93       	push	r18
     2a2:	0e 94 32 06 	call	0xc64	; 0xc64 <sprintf>
	LcdTask();
     2a6:	0e 94 a6 00 	call	0x14c	; 0x14c <LcdTask>
	while(subButton!=centralButton)
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	c4 33       	cpi	r28, 0x34	; 52
     2b8:	09 f4       	brne	.+2      	; 0x2bc <subMenuLeft+0x52>
     2ba:	40 c0       	rjmp	.+128    	; 0x33c <subMenuLeft+0xd2>
		subButton=getButton();
		if(subButton == upButton)
		{
			while(!buttonReleased());
			ki+=1;
			sprintf(menuStr2,"ki = %03d", ki);
     2bc:	07 e9       	ldi	r16, 0x97	; 151
     2be:	10 e0       	ldi	r17, 0x00	; 0
     2c0:	c4 ef       	ldi	r28, 0xF4	; 244
     2c2:	d0 e0       	ldi	r29, 0x00	; 0
	sprintf(menuStr1, "Adjust ki");
	sprintf(menuStr2,"ki = %03d", ki);
	LcdTask();
	while(subButton!=centralButton)
	{
		subButton=getButton();
     2c4:	0e 94 95 00 	call	0x12a	; 0x12a <getButton>
		if(subButton == upButton)
     2c8:	81 33       	cpi	r24, 0x31	; 49
     2ca:	d1 f4       	brne	.+52     	; 0x300 <subMenuLeft+0x96>
		{
			while(!buttonReleased());
     2cc:	0e 94 9e 00 	call	0x13c	; 0x13c <buttonReleased>
     2d0:	88 23       	and	r24, r24
     2d2:	e1 f3       	breq	.-8      	; 0x2cc <subMenuLeft+0x62>
			ki+=1;
     2d4:	80 91 62 00 	lds	r24, 0x0062
     2d8:	8f 5f       	subi	r24, 0xFF	; 255
     2da:	80 93 62 00 	sts	0x0062, r24
			sprintf(menuStr2,"ki = %03d", ki);
     2de:	1f 92       	push	r1
     2e0:	8f 93       	push	r24
     2e2:	1f 93       	push	r17
     2e4:	0f 93       	push	r16
     2e6:	df 93       	push	r29
     2e8:	cf 93       	push	r28
     2ea:	0e 94 32 06 	call	0xc64	; 0xc64 <sprintf>
			LcdTask();
     2ee:	0e 94 a6 00 	call	0x14c	; 0x14c <LcdTask>
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	e2 cf       	rjmp	.-60     	; 0x2c4 <subMenuLeft+0x5a>
		}
		else if(subButton == downButton)
     300:	82 33       	cpi	r24, 0x32	; 50
     302:	d1 f4       	brne	.+52     	; 0x338 <subMenuLeft+0xce>
		{
			while(!buttonReleased());
     304:	0e 94 9e 00 	call	0x13c	; 0x13c <buttonReleased>
     308:	88 23       	and	r24, r24
     30a:	e1 f3       	breq	.-8      	; 0x304 <subMenuLeft+0x9a>
			ki-=1;
     30c:	80 91 62 00 	lds	r24, 0x0062
     310:	81 50       	subi	r24, 0x01	; 1
     312:	80 93 62 00 	sts	0x0062, r24
			sprintf(menuStr2,"ki = %03d", ki);
     316:	1f 92       	push	r1
     318:	8f 93       	push	r24
     31a:	1f 93       	push	r17
     31c:	0f 93       	push	r16
     31e:	df 93       	push	r29
     320:	cf 93       	push	r28
     322:	0e 94 32 06 	call	0xc64	; 0xc64 <sprintf>
			LcdTask();
     326:	0e 94 a6 00 	call	0x14c	; 0x14c <LcdTask>
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	c6 cf       	rjmp	.-116    	; 0x2c4 <subMenuLeft+0x5a>
{
	char subButton = getButton();
	sprintf(menuStr1, "Adjust ki");
	sprintf(menuStr2,"ki = %03d", ki);
	LcdTask();
	while(subButton!=centralButton)
     338:	84 33       	cpi	r24, 0x34	; 52
     33a:	21 f6       	brne	.-120    	; 0x2c4 <subMenuLeft+0x5a>
			ki-=1;
			sprintf(menuStr2,"ki = %03d", ki);
			LcdTask();
		}
	}
}
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	1f 91       	pop	r17
     342:	0f 91       	pop	r16
     344:	08 95       	ret

00000346 <subMenuUp>:
void subMenuUp(void)
{
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
	char subButton = getButton();
     34a:	0e 94 95 00 	call	0x12a	; 0x12a <getButton>
     34e:	c8 2f       	mov	r28, r24
	sprintf(menuStr1, "Run selection");
     350:	9e e0       	ldi	r25, 0x0E	; 14
     352:	e5 eb       	ldi	r30, 0xB5	; 181
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	a2 e0       	ldi	r26, 0x02	; 2
     358:	b1 e0       	ldi	r27, 0x01	; 1
     35a:	01 90       	ld	r0, Z+
     35c:	0d 92       	st	X+, r0
     35e:	9a 95       	dec	r25
     360:	e1 f7       	brne	.-8      	; 0x35a <subMenuUp+0x14>
	LcdTask();
     362:	0e 94 a6 00 	call	0x14c	; 0x14c <LcdTask>
	while(subButton != centralButton)
     366:	c4 33       	cpi	r28, 0x34	; 52
     368:	09 f4       	brne	.+2      	; 0x36c <subMenuUp+0x26>
     36a:	40 c0       	rjmp	.+128    	; 0x3ec <subMenuUp+0xa6>
bool getRunWallFlag(){
	return runWallFlag;
}

void setRunLineFlag(bool value){
	runLineFlag = value;
     36c:	c1 e0       	ldi	r28, 0x01	; 1
			{
				// do nothing
			};
			setRunLineFlag(true);
			setRunWallFlag(false);
			sprintf(menuStr2,"RunLine()");
     36e:	da e0       	ldi	r29, 0x0A	; 10
	char subButton = getButton();
	sprintf(menuStr1, "Run selection");
	LcdTask();
	while(subButton != centralButton)
	{
		subButton = getButton();
     370:	0e 94 95 00 	call	0x12a	; 0x12a <getButton>
		if(subButton == upButton)
     374:	81 33       	cpi	r24, 0x31	; 49
     376:	d9 f4       	brne	.+54     	; 0x3ae <subMenuUp+0x68>
		{
			while(!buttonReleased())
     378:	0e 94 9e 00 	call	0x13c	; 0x13c <buttonReleased>
     37c:	88 23       	and	r24, r24
     37e:	e1 f3       	breq	.-8      	; 0x378 <subMenuUp+0x32>
bool getRunWallFlag(){
	return runWallFlag;
}

void setRunLineFlag(bool value){
	runLineFlag = value;
     380:	c0 93 dd 00 	sts	0x00DD, r28
}

void setRunWallFlag(bool value){
	runWallFlag = value;
     384:	10 92 dc 00 	sts	0x00DC, r1
			{
				// do nothing
			};
			setRunLineFlag(true);
			setRunWallFlag(false);
			sprintf(menuStr2,"RunLine()");
     388:	e1 ea       	ldi	r30, 0xA1	; 161
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	a4 ef       	ldi	r26, 0xF4	; 244
     38e:	b0 e0       	ldi	r27, 0x00	; 0
     390:	8d 2f       	mov	r24, r29
     392:	01 90       	ld	r0, Z+
     394:	0d 92       	st	X+, r0
     396:	8a 95       	dec	r24
     398:	e1 f7       	brne	.-8      	; 0x392 <subMenuUp+0x4c>
			LcdTask();
     39a:	0e 94 a6 00 	call	0x14c	; 0x14c <LcdTask>
			LCDGotoXY(15,0);
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	8f e0       	ldi	r24, 0x0F	; 15
     3a2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCDGotoXY>
			LCDPutChar(' ');	// 0x20 using empty char blanks the up arrow
     3a6:	80 e2       	ldi	r24, 0x20	; 32
     3a8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCDPutChar>
     3ac:	e1 cf       	rjmp	.-62     	; 0x370 <subMenuUp+0x2a>
		}
		else if(subButton == downButton)
     3ae:	82 33       	cpi	r24, 0x32	; 50
     3b0:	d9 f4       	brne	.+54     	; 0x3e8 <subMenuUp+0xa2>
		{
			while(!buttonReleased())
     3b2:	0e 94 9e 00 	call	0x13c	; 0x13c <buttonReleased>
     3b6:	88 23       	and	r24, r24
     3b8:	e1 f3       	breq	.-8      	; 0x3b2 <subMenuUp+0x6c>
void setRunLineFlag(bool value){
	runLineFlag = value;
}

void setRunWallFlag(bool value){
	runWallFlag = value;
     3ba:	c0 93 dc 00 	sts	0x00DC, r28
bool getRunWallFlag(){
	return runWallFlag;
}

void setRunLineFlag(bool value){
	runLineFlag = value;
     3be:	10 92 dd 00 	sts	0x00DD, r1
			{
				// do nothing
			};
			setRunWallFlag(true);
			setRunLineFlag(false);
			sprintf(menuStr2,"RunWall()");
     3c2:	eb ea       	ldi	r30, 0xAB	; 171
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	a4 ef       	ldi	r26, 0xF4	; 244
     3c8:	b0 e0       	ldi	r27, 0x00	; 0
     3ca:	8d 2f       	mov	r24, r29
     3cc:	01 90       	ld	r0, Z+
     3ce:	0d 92       	st	X+, r0
     3d0:	8a 95       	dec	r24
     3d2:	e1 f7       	brne	.-8      	; 0x3cc <subMenuUp+0x86>
			LcdTask();
     3d4:	0e 94 a6 00 	call	0x14c	; 0x14c <LcdTask>
			LCDGotoXY(15,1);
     3d8:	6c 2f       	mov	r22, r28
     3da:	8f e0       	ldi	r24, 0x0F	; 15
     3dc:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCDGotoXY>
			LCDPutChar(' ');	// 0x20 using empty char blanks the down arrow
     3e0:	80 e2       	ldi	r24, 0x20	; 32
     3e2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCDPutChar>
     3e6:	c4 cf       	rjmp	.-120    	; 0x370 <subMenuUp+0x2a>
void subMenuUp(void)
{
	char subButton = getButton();
	sprintf(menuStr1, "Run selection");
	LcdTask();
	while(subButton != centralButton)
     3e8:	84 33       	cpi	r24, 0x34	; 52
     3ea:	11 f6       	brne	.-124    	; 0x370 <subMenuUp+0x2a>
			LcdTask();
			LCDGotoXY(15,1);
			LCDPutChar(' ');	// 0x20 using empty char blanks the down arrow
		}
	}
}
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	08 95       	ret

000003f2 <subMenuDown>:
void subMenuDown(void)
{
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
	char subButton = getButton();
     3fa:	0e 94 95 00 	call	0x12a	; 0x12a <getButton>
     3fe:	c8 2f       	mov	r28, r24
	sprintf(menuStr1, "En_Bluetooth");
     400:	9d e0       	ldi	r25, 0x0D	; 13
     402:	e3 ec       	ldi	r30, 0xC3	; 195
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	a2 e0       	ldi	r26, 0x02	; 2
     408:	b1 e0       	ldi	r27, 0x01	; 1
     40a:	01 90       	ld	r0, Z+
     40c:	0d 92       	st	X+, r0
     40e:	9a 95       	dec	r25
     410:	e1 f7       	brne	.-8      	; 0x40a <subMenuDown+0x18>
	LcdTask();
     412:	0e 94 a6 00 	call	0x14c	; 0x14c <LcdTask>
	while(subButton != centralButton)
     416:	c4 33       	cpi	r28, 0x34	; 52
     418:	09 f4       	brne	.+2      	; 0x41c <subMenuDown+0x2a>
     41a:	40 c0       	rjmp	.+128    	; 0x49c <subMenuDown+0xaa>
		subButton=getButton();
		if(subButton == upButton)
		{
			while(!buttonReleased());
			k+=5;
			sprintf(menuStr2,"kp = %03d", k);
     41c:	03 e8       	ldi	r16, 0x83	; 131
     41e:	10 e0       	ldi	r17, 0x00	; 0
     420:	c4 ef       	ldi	r28, 0xF4	; 244
     422:	d0 e0       	ldi	r29, 0x00	; 0
	char subButton = getButton();
	sprintf(menuStr1, "En_Bluetooth");
	LcdTask();
	while(subButton != centralButton)
	{
		subButton=getButton();
     424:	0e 94 95 00 	call	0x12a	; 0x12a <getButton>
		if(subButton == upButton)
     428:	81 33       	cpi	r24, 0x31	; 49
     42a:	d1 f4       	brne	.+52     	; 0x460 <subMenuDown+0x6e>
		{
			while(!buttonReleased());
     42c:	0e 94 9e 00 	call	0x13c	; 0x13c <buttonReleased>
     430:	88 23       	and	r24, r24
     432:	e1 f3       	breq	.-8      	; 0x42c <subMenuDown+0x3a>
			k+=5;
     434:	80 91 61 00 	lds	r24, 0x0061
     438:	8b 5f       	subi	r24, 0xFB	; 251
     43a:	80 93 61 00 	sts	0x0061, r24
			sprintf(menuStr2,"kp = %03d", k);
     43e:	1f 92       	push	r1
     440:	8f 93       	push	r24
     442:	1f 93       	push	r17
     444:	0f 93       	push	r16
     446:	df 93       	push	r29
     448:	cf 93       	push	r28
     44a:	0e 94 32 06 	call	0xc64	; 0xc64 <sprintf>
			LcdTask();
     44e:	0e 94 a6 00 	call	0x14c	; 0x14c <LcdTask>
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	e2 cf       	rjmp	.-60     	; 0x424 <subMenuDown+0x32>
		}
		else if(subButton == downButton)
     460:	82 33       	cpi	r24, 0x32	; 50
     462:	d1 f4       	brne	.+52     	; 0x498 <subMenuDown+0xa6>
		{
			while(!buttonReleased());
     464:	0e 94 9e 00 	call	0x13c	; 0x13c <buttonReleased>
     468:	88 23       	and	r24, r24
     46a:	e1 f3       	breq	.-8      	; 0x464 <subMenuDown+0x72>
			k-=5;
     46c:	80 91 61 00 	lds	r24, 0x0061
     470:	85 50       	subi	r24, 0x05	; 5
     472:	80 93 61 00 	sts	0x0061, r24
			sprintf(menuStr2,"kp = %03d", k);
     476:	1f 92       	push	r1
     478:	8f 93       	push	r24
     47a:	1f 93       	push	r17
     47c:	0f 93       	push	r16
     47e:	df 93       	push	r29
     480:	cf 93       	push	r28
     482:	0e 94 32 06 	call	0xc64	; 0xc64 <sprintf>
			LcdTask();
     486:	0e 94 a6 00 	call	0x14c	; 0x14c <LcdTask>
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	c6 cf       	rjmp	.-116    	; 0x424 <subMenuDown+0x32>
void subMenuDown(void)
{
	char subButton = getButton();
	sprintf(menuStr1, "En_Bluetooth");
	LcdTask();
	while(subButton != centralButton)
     498:	84 33       	cpi	r24, 0x34	; 52
     49a:	21 f6       	brne	.-120    	; 0x424 <subMenuDown+0x32>
			k-=5;
			sprintf(menuStr2,"kp = %03d", k);
			LcdTask();
		}
	}
}
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	1f 91       	pop	r17
     4a2:	0f 91       	pop	r16
     4a4:	08 95       	ret

000004a6 <buttonMenu>:
//		'2':
//		'3':
//		'4':
/******************************************************************************/
void buttonMenu(void)
{
     4a6:	cf 93       	push	r28
	char lastButton = noButton;
	char button = getButton();
     4a8:	0e 94 95 00 	call	0x12a	; 0x12a <getButton>
     4ac:	c8 2f       	mov	r28, r24
	sprintf(menuStr1, "Run");
     4ae:	82 e5       	ldi	r24, 0x52	; 82
     4b0:	95 e7       	ldi	r25, 0x75	; 117
     4b2:	ae e6       	ldi	r26, 0x6E	; 110
     4b4:	b0 e0       	ldi	r27, 0x00	; 0
     4b6:	80 93 02 01 	sts	0x0102, r24
     4ba:	90 93 03 01 	sts	0x0103, r25
     4be:	a0 93 04 01 	sts	0x0104, r26
     4c2:	b0 93 05 01 	sts	0x0105, r27
	sprintf(menuStr2, "Parameters");
     4c6:	9b e0       	ldi	r25, 0x0B	; 11
     4c8:	e0 ed       	ldi	r30, 0xD0	; 208
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	a4 ef       	ldi	r26, 0xF4	; 244
     4ce:	b0 e0       	ldi	r27, 0x00	; 0
     4d0:	01 90       	ld	r0, Z+
     4d2:	0d 92       	st	X+, r0
     4d4:	9a 95       	dec	r25
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <buttonMenu+0x2a>
	LcdTask();
     4d8:	0e 94 a6 00 	call	0x14c	; 0x14c <LcdTask>
	LCDGotoXY(15,0);
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	8f e0       	ldi	r24, 0x0F	; 15
     4e0:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCDGotoXY>
	LCDPutChar(1);	// display the up arrow
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCDPutChar>
	LCDGotoXY(14,1);
     4ea:	61 e0       	ldi	r22, 0x01	; 1
     4ec:	8e e0       	ldi	r24, 0x0E	; 14
     4ee:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCDGotoXY>
	LCDPutChar(0x7F);	// display the left arrow
     4f2:	8f e7       	ldi	r24, 0x7F	; 127
     4f4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCDPutChar>
	LCDGotoXY(15,1);
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	8f e0       	ldi	r24, 0x0F	; 15
     4fc:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCDGotoXY>
	LCDPutChar(0x7E);	// display the right arrow
     500:	8e e7       	ldi	r24, 0x7E	; 126
     502:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCDPutChar>
	while(button != centralButton)
     506:	c4 33       	cpi	r28, 0x34	; 52
     508:	e9 f0       	breq	.+58     	; 0x544 <buttonMenu+0x9e>
	{
		button=getButton();
     50a:	0e 94 95 00 	call	0x12a	; 0x12a <getButton>
		if(button != lastButton)
     50e:	85 33       	cpi	r24, 0x35	; 53
     510:	e1 f3       	breq	.-8      	; 0x50a <buttonMenu+0x64>
		{
			switch (button)
     512:	81 33       	cpi	r24, 0x31	; 49
     514:	61 f0       	breq	.+24     	; 0x52e <buttonMenu+0x88>
     516:	18 f4       	brcc	.+6      	; 0x51e <buttonMenu+0x78>
     518:	80 33       	cpi	r24, 0x30	; 48
     51a:	31 f0       	breq	.+12     	; 0x528 <buttonMenu+0x82>
     51c:	11 c0       	rjmp	.+34     	; 0x540 <buttonMenu+0x9a>
     51e:	82 33       	cpi	r24, 0x32	; 50
     520:	49 f0       	breq	.+18     	; 0x534 <buttonMenu+0x8e>
     522:	83 33       	cpi	r24, 0x33	; 51
     524:	51 f0       	breq	.+20     	; 0x53a <buttonMenu+0x94>
     526:	0c c0       	rjmp	.+24     	; 0x540 <buttonMenu+0x9a>
			{
				case rightButton:
				subMenuRight();
     528:	0e 94 c7 00 	call	0x18e	; 0x18e <subMenuRight>
				break;
     52c:	ee cf       	rjmp	.-36     	; 0x50a <buttonMenu+0x64>
				
				case upButton:
				subMenuUp();
     52e:	0e 94 a3 01 	call	0x346	; 0x346 <subMenuUp>
				break;
     532:	eb cf       	rjmp	.-42     	; 0x50a <buttonMenu+0x64>

				case downButton:
				subMenuDown();
     534:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <subMenuDown>
				break;
     538:	e8 cf       	rjmp	.-48     	; 0x50a <buttonMenu+0x64>

				case leftButton :
				subMenuLeft();
     53a:	0e 94 35 01 	call	0x26a	; 0x26a <subMenuLeft>
				break;
     53e:	e5 cf       	rjmp	.-54     	; 0x50a <buttonMenu+0x64>
	LCDPutChar(1);	// display the up arrow
	LCDGotoXY(14,1);
	LCDPutChar(0x7F);	// display the left arrow
	LCDGotoXY(15,1);
	LCDPutChar(0x7E);	// display the right arrow
	while(button != centralButton)
     540:	84 33       	cpi	r24, 0x34	; 52
     542:	19 f7       	brne	.-58     	; 0x50a <buttonMenu+0x64>
		}
	}
	
	lastButton = button;

}
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <initFloorSensor>:

// Initialize the Floor Sensor.
void initFloorSensor(){

	// Set the directions.
	setInput(DDRB, L3);
     548:	bf 98       	cbi	0x17, 7	; 23
	setInput(DDRB, L2);
     54a:	be 98       	cbi	0x17, 6	; 23
	setInput(DDRB, L1);
     54c:	bd 98       	cbi	0x17, 5	; 23
	setInput(DDRB, C1);
     54e:	bc 98       	cbi	0x17, 4	; 23
	setInput(DDRA, R1);
     550:	d2 98       	cbi	0x1a, 2	; 26
	setInput(DDRA, R2);
     552:	d1 98       	cbi	0x1a, 1	; 26
	setInput(DDRA, R3);
     554:	d0 98       	cbi	0x1a, 0	; 26
     556:	08 95       	ret

00000558 <LCD_delay>:
// Delay. Circa 200 us at 10 MHz
// The data sheet says that 40 us is sufficient, but the displays we have
// require more than 100 us to work properly.
void LCD_delay(void) __attribute__ ((noinline)); // noinline prevents problems when optimizing with option -O3
void LCD_delay(void)  {
   __asm__ __volatile__("ldi r31,65 \n 1:\n dec r31 \n brne 1b" ::: "r31");
     558:	f1 e4       	ldi	r31, 0x41	; 65
     55a:	fa 95       	dec	r31
     55c:	f1 f7       	brne	.-4      	; 0x55a <LCD_delay+0x2>
     55e:	08 95       	ret

00000560 <LCD_write_nibble>:
}

// Write 4 bits
static void LCD_write_nibble(char data) {
   const char DataMask = 0x0F << LCD_DATA4;
   LCD_PORT = (LCD_PORT & ~DataMask) | (data & DataMask);
     560:	95 b3       	in	r25, 0x15	; 21
     562:	80 7f       	andi	r24, 0xF0	; 240
     564:	9f 70       	andi	r25, 0x0F	; 15
     566:	89 2b       	or	r24, r25
     568:	85 bb       	out	0x15, r24	; 21
   LCD_PORT |= (1<<LCD_ENABLE); // EN=1
     56a:	ab 9a       	sbi	0x15, 3	; 21
   LCD_delay();
     56c:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_delay>
   LCD_PORT &= ~(1<<LCD_ENABLE); // EN=0
     570:	ab 98       	cbi	0x15, 3	; 21
   LCD_delay();
     572:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_delay>
     576:	08 95       	ret

00000578 <LCD_write_data>:
}

// Write 8 bits. RS = 0 or 1
static void LCD_write_data(unsigned char data) {
     578:	cf 93       	push	r28
     57a:	c8 2f       	mov	r28, r24
   LCD_write_nibble(data);            // RD=0, write MSN
     57c:	0e 94 b0 02 	call	0x560	; 0x560 <LCD_write_nibble>
   LCD_write_nibble(data << 4);       // write LSN
     580:	8c 2f       	mov	r24, r28
     582:	82 95       	swap	r24
     584:	80 7f       	andi	r24, 0xF0	; 240
     586:	0e 94 b0 02 	call	0x560	; 0x560 <LCD_write_nibble>
}
     58a:	cf 91       	pop	r28
     58c:	08 95       	ret

0000058e <LCD_long_delay>:
}

// Long delay. Circa 26 ms at 10 MHz
void LCD_long_delay(void) __attribute__ ((noinline));
void LCD_long_delay(void) {
   __asm__ __volatile__("clr r26 \n clr r27 \n 2:\n sbiw r26,1\n brne 2b \n" ::: "r26", "r27");
     58e:	aa 27       	eor	r26, r26
     590:	bb 27       	eor	r27, r27
     592:	11 97       	sbiw	r26, 0x01	; 1
     594:	f1 f7       	brne	.-4      	; 0x592 <LCD_long_delay+0x4>
     596:	08 95       	ret

00000598 <LCDClear>:
   
}

// Clear the LCD display
void LCDClear(void) {
   LCD_long_delay();
     598:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_long_delay>
   LCD_PORT &= ~(1<<LCD_RS);          // RS=0
     59c:	aa 98       	cbi	0x15, 2	; 21
   LCD_write_data(2);                 // cursor home
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	0e 94 bc 02 	call	0x578	; 0x578 <LCD_write_data>
   LCD_long_delay();
     5a4:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_long_delay>
   LCD_write_data(0xC);               // cursor off
     5a8:	8c e0       	ldi	r24, 0x0C	; 12
     5aa:	0e 94 bc 02 	call	0x578	; 0x578 <LCD_write_data>
   LCD_long_delay();
     5ae:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_long_delay>
   LCD_write_data(1);                 // clear
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	0e 94 bc 02 	call	0x578	; 0x578 <LCD_write_data>
   LCD_long_delay();
     5b8:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_long_delay>
   LCD_x = LCD_y = 0;
     5bc:	10 92 df 00 	sts	0x00DF, r1
     5c0:	10 92 e0 00 	sts	0x00E0, r1
     5c4:	08 95       	ret

000005c6 <LCDGotoXY>:
}

// Set the LCD display position
void LCDGotoXY(unsigned char x, unsigned char y) {
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	d8 2f       	mov	r29, r24
     5cc:	c6 2f       	mov	r28, r22
   LCD_delay();
     5ce:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_delay>
   LCD_PORT &= ~(1<<LCD_RS);       // RS=0
     5d2:	aa 98       	cbi	0x15, 2	; 21
   LCD_write_data(LCD_base_y[y]+x);
     5d4:	ec 2f       	mov	r30, r28
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	ec 59       	subi	r30, 0x9C	; 156
     5da:	ff 4f       	sbci	r31, 0xFF	; 255
     5dc:	80 81       	ld	r24, Z
     5de:	8d 0f       	add	r24, r29
     5e0:	0e 94 bc 02 	call	0x578	; 0x578 <LCD_write_data>
   LCD_x = x;
     5e4:	d0 93 e0 00 	sts	0x00E0, r29
   LCD_y = y;
     5e8:	c0 93 df 00 	sts	0x00DF, r28
   LCD_delay();
     5ec:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_delay>
   //LCD_long_delay();
}
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	08 95       	ret

000005f6 <LCDPutChar>:
   char c;
   for (; (c = *str) != 0; str++) LCDPutChar(c);
}

// write a single ASCII character to the display
void LCDPutChar(char c) {
     5f6:	cf 93       	push	r28
     5f8:	c8 2f       	mov	r28, r24
   if (c == '\n') {
     5fa:	8a 30       	cpi	r24, 0x0A	; 10
     5fc:	49 f4       	brne	.+18     	; 0x610 <LCDPutChar+0x1a>
      // newline character goes to next line
      ++LCD_y;
     5fe:	60 91 df 00 	lds	r22, 0x00DF
     602:	6f 5f       	subi	r22, 0xFF	; 255
     604:	60 93 df 00 	sts	0x00DF, r22
      LCDGotoXY(0,LCD_y);
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCDGotoXY>
     60e:	19 c0       	rjmp	.+50     	; 0x642 <LCDPutChar+0x4c>
   }
   else {
      // any other character
      ++LCD_x;
     610:	90 91 e0 00 	lds	r25, 0x00E0
     614:	9f 5f       	subi	r25, 0xFF	; 255
     616:	90 93 e0 00 	sts	0x00E0, r25
      if (LCD_x>LCD_maxx) {
     61a:	80 91 de 00 	lds	r24, 0x00DE
     61e:	89 17       	cp	r24, r25
     620:	40 f4       	brcc	.+16     	; 0x632 <LCDPutChar+0x3c>
         // end of line. go to next line
         ++LCD_y;
     622:	60 91 df 00 	lds	r22, 0x00DF
     626:	6f 5f       	subi	r22, 0xFF	; 255
     628:	60 93 df 00 	sts	0x00DF, r22
         LCDGotoXY(0,LCD_y);
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCDGotoXY>
      }
      LCD_delay();
     632:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_delay>
      LCD_PORT |= (1<<LCD_RS);  // RS = 1
     636:	aa 9a       	sbi	0x15, 2	; 21
      LCD_write_data(c);
     638:	8c 2f       	mov	r24, r28
     63a:	0e 94 bc 02 	call	0x578	; 0x578 <LCD_write_data>
      LCD_delay();
     63e:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_delay>
   }
}
     642:	cf 91       	pop	r28
     644:	08 95       	ret

00000646 <LCDPutString>:
   LCD_delay();
   //LCD_long_delay();
}

// write a zero-terminated ASCII string to the display
void LCDPutString(const char *str) {
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	ec 01       	movw	r28, r24
   char c;
   for (; (c = *str) != 0; str++) LCDPutChar(c);
     64c:	88 81       	ld	r24, Y
     64e:	88 23       	and	r24, r24
     650:	31 f0       	breq	.+12     	; 0x65e <LCDPutString+0x18>
     652:	21 96       	adiw	r28, 0x01	; 1
     654:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCDPutChar>
     658:	89 91       	ld	r24, Y+
     65a:	81 11       	cpse	r24, r1
     65c:	fb cf       	rjmp	.-10     	; 0x654 <LCDPutString+0xe>
}
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	08 95       	ret

00000664 <LCDInit>:
//                       Public functions                              //
//                                                                     //
/////////////////////////////////////////////////////////////////////////

// Initialize the LCD controller. Specify the number of columns
void LCDInit(unsigned char lcd_columns) {
     664:	ef 92       	push	r14
     666:	ff 92       	push	r15
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
     674:	60 97       	sbiw	r28, 0x10	; 16
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	f8 94       	cli
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	cd bf       	out	0x3d, r28	; 61
	const uint8_t cUp[] = {0x04,0x0E,0x15,0x04,0x04,0x00,0x00,0x00,};
     680:	98 e0       	ldi	r25, 0x08	; 8
     682:	e9 e6       	ldi	r30, 0x69	; 105
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	de 01       	movw	r26, r28
     688:	11 96       	adiw	r26, 0x01	; 1
     68a:	01 90       	ld	r0, Z+
     68c:	0d 92       	st	X+, r0
     68e:	9a 95       	dec	r25
     690:	e1 f7       	brne	.-8      	; 0x68a <LCDInit+0x26>
	const uint8_t cDown[] = {0x04,0x04,0x15,0x0E,0x04,0x00,0x00,0x00};
     692:	98 e0       	ldi	r25, 0x08	; 8
     694:	e1 e7       	ldi	r30, 0x71	; 113
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	de 01       	movw	r26, r28
     69a:	19 96       	adiw	r26, 0x09	; 9
     69c:	01 90       	ld	r0, Z+
     69e:	0d 92       	st	X+, r0
     6a0:	9a 95       	dec	r25
     6a2:	e1 f7       	brne	.-8      	; 0x69c <LCDInit+0x38>

   LCD_PORT &= ~((1<<LCD_ENABLE) | (1<<LCD_RS)); // EN=0, RS=0
     6a4:	95 b3       	in	r25, 0x15	; 21
     6a6:	93 7f       	andi	r25, 0xF3	; 243
     6a8:	95 bb       	out	0x15, r25	; 21
   LCD_PORT &= ~(1<<LCD_RD); // Set RD = 0 in case it is connected
     6aa:	a9 98       	cbi	0x15, 1	; 21
   LCD_DIRECTION |= (0xF << LCD_DATA4) | (1<<LCD_RS) | (1<<LCD_ENABLE) ; // set all as output
     6ac:	94 b3       	in	r25, 0x14	; 20
     6ae:	9c 6f       	ori	r25, 0xFC	; 252
     6b0:	94 bb       	out	0x14, r25	; 20
   //LCD_DIRECTION |= (1<<LCD_RD); // set RD as output if it is connected
   LCD_maxx = lcd_columns;
     6b2:	80 93 de 00 	sts	0x00DE, r24
   LCD_base_y[2] = lcd_columns+0x80;
     6b6:	e4 e6       	ldi	r30, 0x64	; 100
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	90 e8       	ldi	r25, 0x80	; 128
     6bc:	98 0f       	add	r25, r24
     6be:	92 83       	std	Z+2, r25	; 0x02
   LCD_base_y[3] = lcd_columns+0xc0;
     6c0:	80 54       	subi	r24, 0x40	; 64
     6c2:	83 83       	std	Z+3, r24	; 0x03
   LCD_long_delay();
     6c4:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_long_delay>
   LCD_write_nibble(0x30);
     6c8:	80 e3       	ldi	r24, 0x30	; 48
     6ca:	0e 94 b0 02 	call	0x560	; 0x560 <LCD_write_nibble>
   LCD_long_delay();
     6ce:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_long_delay>
   LCD_write_nibble(0x30);
     6d2:	80 e3       	ldi	r24, 0x30	; 48
     6d4:	0e 94 b0 02 	call	0x560	; 0x560 <LCD_write_nibble>
   LCD_long_delay();
     6d8:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_long_delay>
   LCD_write_nibble(0x30);
     6dc:	80 e3       	ldi	r24, 0x30	; 48
     6de:	0e 94 b0 02 	call	0x560	; 0x560 <LCD_write_nibble>
   LCD_long_delay();
     6e2:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_long_delay>
   LCD_write_nibble(0x20);
     6e6:	80 e2       	ldi	r24, 0x20	; 32
     6e8:	0e 94 b0 02 	call	0x560	; 0x560 <LCD_write_nibble>
   LCD_long_delay();
     6ec:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_long_delay>
   LCD_write_data(0x28);
     6f0:	88 e2       	ldi	r24, 0x28	; 40
     6f2:	0e 94 bc 02 	call	0x578	; 0x578 <LCD_write_data>
   LCD_long_delay();
     6f6:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_long_delay>
   LCD_write_data(4);
     6fa:	84 e0       	ldi	r24, 0x04	; 4
     6fc:	0e 94 bc 02 	call	0x578	; 0x578 <LCD_write_data>
   LCD_long_delay();
     700:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_long_delay>
   LCD_write_data(0x85);
     704:	85 e8       	ldi	r24, 0x85	; 133
     706:	0e 94 bc 02 	call	0x578	; 0x578 <LCD_write_data>
   LCD_long_delay();
     70a:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_long_delay>
   LCD_PORT &= ~(1<<LCD_RS);
     70e:	aa 98       	cbi	0x15, 2	; 21
   LCD_write_data(6);
     710:	86 e0       	ldi	r24, 0x06	; 6
     712:	0e 94 bc 02 	call	0x578	; 0x578 <LCD_write_data>
// Return:
/******************************************************************************/
static void LcdCgramWr (uint8_t addr, const uint8_t *d)
{                        
   uint8_t i;
   LCD_write_data(0x40 + 8*addr);
     716:	80 e4       	ldi	r24, 0x40	; 64
     718:	0e 94 bc 02 	call	0x578	; 0x578 <LCD_write_data>
     71c:	8e 01       	movw	r16, r28
     71e:	07 5f       	subi	r16, 0xF7	; 247
     720:	1f 4f       	sbci	r17, 0xFF	; 255
        // cmd to LCD to receive data to CG-Ram
   for (i = 0; i <= 7; i++) {
     722:	7e 01       	movw	r14, r28
     724:	81 e1       	ldi	r24, 0x11	; 17
     726:	e8 0e       	add	r14, r24
     728:	f1 1c       	adc	r15, r1
    
      LCDPutChar(*d);               // tx 8 char to CG-Ram
     72a:	f8 01       	movw	r30, r16
     72c:	81 91       	ld	r24, Z+
     72e:	8f 01       	movw	r16, r30
     730:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCDPutChar>
static void LcdCgramWr (uint8_t addr, const uint8_t *d)
{                        
   uint8_t i;
   LCD_write_data(0x40 + 8*addr);
        // cmd to LCD to receive data to CG-Ram
   for (i = 0; i <= 7; i++) {
     734:	0e 15       	cp	r16, r14
     736:	1f 05       	cpc	r17, r15
     738:	c1 f7       	brne	.-16     	; 0x72a <LCDInit+0xc6>
    
      LCDPutChar(*d);               // tx 8 char to CG-Ram
      d++;                          // point to next value
   }
   LCD_write_data(0x80);                 // back to DD ram
     73a:	80 e8       	ldi	r24, 0x80	; 128
     73c:	0e 94 bc 02 	call	0x578	; 0x578 <LCD_write_data>
// Return:
/******************************************************************************/
static void LcdCgramWr (uint8_t addr, const uint8_t *d)
{                        
   uint8_t i;
   LCD_write_data(0x40 + 8*addr);
     740:	88 e4       	ldi	r24, 0x48	; 72
     742:	0e 94 bc 02 	call	0x578	; 0x578 <LCD_write_data>
     746:	8e 01       	movw	r16, r28
     748:	0f 5f       	subi	r16, 0xFF	; 255
     74a:	1f 4f       	sbci	r17, 0xFF	; 255
        // cmd to LCD to receive data to CG-Ram
   for (i = 0; i <= 7; i++) {
     74c:	7e 01       	movw	r14, r28
     74e:	f9 e0       	ldi	r31, 0x09	; 9
     750:	ef 0e       	add	r14, r31
     752:	f1 1c       	adc	r15, r1
    
      LCDPutChar(*d);               // tx 8 char to CG-Ram
     754:	f8 01       	movw	r30, r16
     756:	81 91       	ld	r24, Z+
     758:	8f 01       	movw	r16, r30
     75a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCDPutChar>
static void LcdCgramWr (uint8_t addr, const uint8_t *d)
{                        
   uint8_t i;
   LCD_write_data(0x40 + 8*addr);
        // cmd to LCD to receive data to CG-Ram
   for (i = 0; i <= 7; i++) {
     75e:	0e 15       	cp	r16, r14
     760:	1f 05       	cpc	r17, r15
     762:	c1 f7       	brne	.-16     	; 0x754 <LCDInit+0xf0>
    
      LCDPutChar(*d);               // tx 8 char to CG-Ram
      d++;                          // point to next value
   }
   LCD_write_data(0x80);                 // back to DD ram
     764:	80 e8       	ldi	r24, 0x80	; 128
     766:	0e 94 bc 02 	call	0x578	; 0x578 <LCD_write_data>
   LCD_PORT &= ~(1<<LCD_RS);
   LCD_write_data(6);
   
   LcdCgramWr(0,cDown);
   LcdCgramWr(1,cUp);
   LCDClear();
     76a:	0e 94 cc 02 	call	0x598	; 0x598 <LCDClear>
   
}
     76e:	60 96       	adiw	r28, 0x10	; 16
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	de bf       	out	0x3e, r29	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	cd bf       	out	0x3d, r28	; 61
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	ff 90       	pop	r15
     784:	ef 90       	pop	r14
     786:	08 95       	ret

00000788 <LEDWrite>:
	LEDUpdate();
}

//Send data through SPI
void LEDWrite(uint8_t data){
	SPDR = data;
     788:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & 0b10000000)){}
     78a:	77 9b       	sbis	0x0e, 7	; 14
     78c:	fe cf       	rjmp	.-4      	; 0x78a <LEDWrite+0x2>
}
     78e:	08 95       	ret

00000790 <LEDUpdate>:

// Send new values to shift registers.
void LEDUpdate(){
	setLow(PORTB, SPI_SS);
     790:	c4 98       	cbi	0x18, 4	; 24
	LEDWrite(ledBank1);
     792:	80 91 68 00 	lds	r24, 0x0068
     796:	0e 94 c4 03 	call	0x788	; 0x788 <LEDWrite>
	LEDWrite(ledBank0);
     79a:	80 91 ed 00 	lds	r24, 0x00ED
     79e:	0e 94 c4 03 	call	0x788	; 0x788 <LEDWrite>
	setHigh(PORTB, SPI_SS);
     7a2:	c4 9a       	sbi	0x18, 4	; 24
     7a4:	08 95       	ret

000007a6 <LEDInit>:
	// bit4 MSTR	1 = Set to Master.
	// bit3 CPOL	1 = SCK low when idle
	// bit2 CPHA	1 = setup falling, sample rising (mode3)
	// bit1	SPR1	0 = fosc/4 = 2.5 MHz
	// bit0 SPR0 	0
	SPCR = 0b01011100;
     7a6:	8c e5       	ldi	r24, 0x5C	; 92
     7a8:	8d b9       	out	0x0d, r24	; 13

	// SPI Status Register SPSR
	SPSR = 0b00000000;
     7aa:	1e b8       	out	0x0e, r1	; 14

	//set directions
	setOutput(DDRB, SPI_CLK);
     7ac:	bf 9a       	sbi	0x17, 7	; 23
	setOutput(DDRB, SPI_MOSI);
     7ae:	bd 9a       	sbi	0x17, 5	; 23
	setOutput(DDRB, SPI_SS);
     7b0:	bc 9a       	sbi	0x17, 4	; 23
	setOutput(DDRC, LED_OE);
     7b2:	a1 9a       	sbi	0x14, 1	; 20

	// Set the initial output values for outputs
	setLow(PORTB, SPI_MOSI);
     7b4:	c5 98       	cbi	0x18, 5	; 24
	setLow(PORTB, SPI_SS);
     7b6:	c4 98       	cbi	0x18, 4	; 24
	setHigh(PORTC, LED_OE);		//default off
     7b8:	a9 9a       	sbi	0x15, 1	; 21

	// Initilize Timer/Counter 2		
	TCCR2 = 0b00001101;
     7ba:	8d e0       	ldi	r24, 0x0D	; 13
     7bc:	85 bd       	out	0x25, r24	; 37
	// WGM CTC, OCR2 is TOP
	// clk/128 prescaler = 78.125 Hz
	
	TCNT2 = 0;	// reset counter0
     7be:	14 bc       	out	0x24, r1	; 36
	OCR2 = 25;	// Counter divisor 78.125 Hz/25 = 3005 Hz 
     7c0:	89 e1       	ldi	r24, 0x19	; 25
     7c2:	83 bd       	out	0x23, r24	; 35

	// Update, set all Led's off
	LEDUpdate();
     7c4:	0e 94 c8 03 	call	0x790	; 0x790 <LEDUpdate>
     7c8:	08 95       	ret

000007ca <LEDEnable>:
	setHigh(PORTB, SPI_SS);
}

// Enable All Leds
void LEDEnable(){
	setLow(PORTC,LED_OE);
     7ca:	a9 98       	cbi	0x15, 1	; 21
     7cc:	08 95       	ret

000007ce <LEDVoltage>:
}

// Get a ADC value for battery and decode for Led's 
void LEDVoltage(){
	
	int ADCValue = AdcConvert(3);
     7ce:	83 e0       	ldi	r24, 0x03	; 3
     7d0:	0e 94 50 00 	call	0xa0	; 0xa0 <AdcConvert>

	if(ADCValue >= 845){
     7d4:	8d 34       	cpi	r24, 0x4D	; 77
     7d6:	23 e0       	ldi	r18, 0x03	; 3
     7d8:	92 07       	cpc	r25, r18
     7da:	34 f0       	brlt	.+12     	; 0x7e8 <LEDVoltage+0x1a>
Blue left	246		3
blue right	222		5 */

void LEDChangeLed(uint8_t bank, uint8_t data){
	if(bank == 0){
		ledBank0 = data;
     7dc:	8f ef       	ldi	r24, 0xFF	; 255
     7de:	80 93 ed 00 	sts	0x00ED, r24
	}
	if(bank == 1){
		ledBank1 = data;
	}
	LEDUpdate();
     7e2:	0e 94 c8 03 	call	0x790	; 0x790 <LEDUpdate>
     7e6:	49 c0       	rjmp	.+146    	; 0x87a <__stack+0x1b>
	int ADCValue = AdcConvert(3);

	if(ADCValue >= 845){
		LEDChangeLed(0,255);
	}
	else if(815<=ADCValue){
     7e8:	8f 32       	cpi	r24, 0x2F	; 47
     7ea:	23 e0       	ldi	r18, 0x03	; 3
     7ec:	92 07       	cpc	r25, r18
     7ee:	34 f0       	brlt	.+12     	; 0x7fc <LEDVoltage+0x2e>
Blue left	246		3
blue right	222		5 */

void LEDChangeLed(uint8_t bank, uint8_t data){
	if(bank == 0){
		ledBank0 = data;
     7f0:	8f e7       	ldi	r24, 0x7F	; 127
     7f2:	80 93 ed 00 	sts	0x00ED, r24
	}
	if(bank == 1){
		ledBank1 = data;
	}
	LEDUpdate();
     7f6:	0e 94 c8 03 	call	0x790	; 0x790 <LEDUpdate>
     7fa:	3f c0       	rjmp	.+126    	; 0x87a <__stack+0x1b>
		LEDChangeLed(0,255);
	}
	else if(815<=ADCValue){
		LEDChangeLed(0,127);
	}
	else if(779<=ADCValue){
     7fc:	8b 30       	cpi	r24, 0x0B	; 11
     7fe:	23 e0       	ldi	r18, 0x03	; 3
     800:	92 07       	cpc	r25, r18
     802:	34 f0       	brlt	.+12     	; 0x810 <LEDVoltage+0x42>
Blue left	246		3
blue right	222		5 */

void LEDChangeLed(uint8_t bank, uint8_t data){
	if(bank == 0){
		ledBank0 = data;
     804:	8f e3       	ldi	r24, 0x3F	; 63
     806:	80 93 ed 00 	sts	0x00ED, r24
	}
	if(bank == 1){
		ledBank1 = data;
	}
	LEDUpdate();
     80a:	0e 94 c8 03 	call	0x790	; 0x790 <LEDUpdate>
     80e:	35 c0       	rjmp	.+106    	; 0x87a <__stack+0x1b>
		LEDChangeLed(0,127);
	}
	else if(779<=ADCValue){
		LEDChangeLed(0,63);
	}
	else if(745<=ADCValue){
     810:	89 3e       	cpi	r24, 0xE9	; 233
     812:	22 e0       	ldi	r18, 0x02	; 2
     814:	92 07       	cpc	r25, r18
     816:	34 f0       	brlt	.+12     	; 0x824 <LEDVoltage+0x56>
Blue left	246		3
blue right	222		5 */

void LEDChangeLed(uint8_t bank, uint8_t data){
	if(bank == 0){
		ledBank0 = data;
     818:	8f e1       	ldi	r24, 0x1F	; 31
     81a:	80 93 ed 00 	sts	0x00ED, r24
	}
	if(bank == 1){
		ledBank1 = data;
	}
	LEDUpdate();
     81e:	0e 94 c8 03 	call	0x790	; 0x790 <LEDUpdate>
     822:	2b c0       	rjmp	.+86     	; 0x87a <__stack+0x1b>
		LEDChangeLed(0,63);
	}
	else if(745<=ADCValue){
		LEDChangeLed(0,31);
	}
	else if(710<=ADCValue){
     824:	86 3c       	cpi	r24, 0xC6	; 198
     826:	22 e0       	ldi	r18, 0x02	; 2
     828:	92 07       	cpc	r25, r18
     82a:	34 f0       	brlt	.+12     	; 0x838 <LEDVoltage+0x6a>
Blue left	246		3
blue right	222		5 */

void LEDChangeLed(uint8_t bank, uint8_t data){
	if(bank == 0){
		ledBank0 = data;
     82c:	8f e0       	ldi	r24, 0x0F	; 15
     82e:	80 93 ed 00 	sts	0x00ED, r24
	}
	if(bank == 1){
		ledBank1 = data;
	}
	LEDUpdate();
     832:	0e 94 c8 03 	call	0x790	; 0x790 <LEDUpdate>
     836:	21 c0       	rjmp	.+66     	; 0x87a <__stack+0x1b>
		LEDChangeLed(0,31);
	}
	else if(710<=ADCValue){
		LEDChangeLed(0,15);
	}
	else if(680<=ADCValue){
     838:	88 3a       	cpi	r24, 0xA8	; 168
     83a:	22 e0       	ldi	r18, 0x02	; 2
     83c:	92 07       	cpc	r25, r18
     83e:	34 f0       	brlt	.+12     	; 0x84c <LEDVoltage+0x7e>
Blue left	246		3
blue right	222		5 */

void LEDChangeLed(uint8_t bank, uint8_t data){
	if(bank == 0){
		ledBank0 = data;
     840:	87 e0       	ldi	r24, 0x07	; 7
     842:	80 93 ed 00 	sts	0x00ED, r24
	}
	if(bank == 1){
		ledBank1 = data;
	}
	LEDUpdate();
     846:	0e 94 c8 03 	call	0x790	; 0x790 <LEDUpdate>
     84a:	17 c0       	rjmp	.+46     	; 0x87a <__stack+0x1b>
		LEDChangeLed(0,15);
	}
	else if(680<=ADCValue){
		LEDChangeLed(0,7);
	}
	else if(644<=ADCValue){
     84c:	84 38       	cpi	r24, 0x84	; 132
     84e:	22 e0       	ldi	r18, 0x02	; 2
     850:	92 07       	cpc	r25, r18
     852:	34 f0       	brlt	.+12     	; 0x860 <__stack+0x1>
Blue left	246		3
blue right	222		5 */

void LEDChangeLed(uint8_t bank, uint8_t data){
	if(bank == 0){
		ledBank0 = data;
     854:	83 e0       	ldi	r24, 0x03	; 3
     856:	80 93 ed 00 	sts	0x00ED, r24
	}
	if(bank == 1){
		ledBank1 = data;
	}
	LEDUpdate();
     85a:	0e 94 c8 03 	call	0x790	; 0x790 <LEDUpdate>
     85e:	0d c0       	rjmp	.+26     	; 0x87a <__stack+0x1b>
		LEDChangeLed(0,7);
	}
	else if(644<=ADCValue){
		LEDChangeLed(0,3);
	}
	else if(607<=ADCValue){
     860:	8f 35       	cpi	r24, 0x5F	; 95
     862:	92 40       	sbci	r25, 0x02	; 2
     864:	34 f0       	brlt	.+12     	; 0x872 <__stack+0x13>
Blue left	246		3
blue right	222		5 */

void LEDChangeLed(uint8_t bank, uint8_t data){
	if(bank == 0){
		ledBank0 = data;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	80 93 ed 00 	sts	0x00ED, r24
	}
	if(bank == 1){
		ledBank1 = data;
	}
	LEDUpdate();
     86c:	0e 94 c8 03 	call	0x790	; 0x790 <LEDUpdate>
     870:	04 c0       	rjmp	.+8      	; 0x87a <__stack+0x1b>
Blue left	246		3
blue right	222		5 */

void LEDChangeLed(uint8_t bank, uint8_t data){
	if(bank == 0){
		ledBank0 = data;
     872:	10 92 ed 00 	sts	0x00ED, r1
	}
	if(bank == 1){
		ledBank1 = data;
	}
	LEDUpdate();
     876:	0e 94 c8 03 	call	0x790	; 0x790 <LEDUpdate>
		LEDChangeLed(0,1);
	}
	else{
		LEDChangeLed(0,0);
	}
	LEDUpdate();
     87a:	0e 94 c8 03 	call	0x790	; 0x790 <LEDUpdate>
     87e:	08 95       	ret

00000880 <changeColor>:
	static volatile uint8_t red = 0;
	static volatile uint8_t green = 0;
	static volatile uint8_t blue = 0;
	static volatile uint8_t color = 0;

	switch(color){
     880:	e0 91 e4 00 	lds	r30, 0x00E4
     884:	8e 2f       	mov	r24, r30
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	87 30       	cpi	r24, 0x07	; 7
     88a:	91 05       	cpc	r25, r1
     88c:	08 f0       	brcs	.+2      	; 0x890 <changeColor+0x10>
     88e:	65 c0       	rjmp	.+202    	; 0x95a <changeColor+0xda>
     890:	fc 01       	movw	r30, r24
     892:	e6 5d       	subi	r30, 0xD6	; 214
     894:	ff 4f       	sbci	r31, 0xFF	; 255
     896:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__tablejump2__>

		// First step, add Red, only once.
		case 0:
		if(red != 15){
     89a:	80 91 e3 00 	lds	r24, 0x00E3
     89e:	8f 30       	cpi	r24, 0x0F	; 15
     8a0:	31 f0       	breq	.+12     	; 0x8ae <changeColor+0x2e>
			red++;
     8a2:	80 91 e3 00 	lds	r24, 0x00E3
     8a6:	8f 5f       	subi	r24, 0xFF	; 255
     8a8:	80 93 e3 00 	sts	0x00E3, r24
			break;
     8ac:	56 c0       	rjmp	.+172    	; 0x95a <changeColor+0xda>
		}else{
			color = 1;	
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	80 93 e4 00 	sts	0x00E4, r24
		}
			
		// Add Green
		case 1:
		if(green != 15){
     8b4:	80 91 e2 00 	lds	r24, 0x00E2
     8b8:	8f 30       	cpi	r24, 0x0F	; 15
     8ba:	31 f0       	breq	.+12     	; 0x8c8 <changeColor+0x48>
			green++;
     8bc:	80 91 e2 00 	lds	r24, 0x00E2
     8c0:	8f 5f       	subi	r24, 0xFF	; 255
     8c2:	80 93 e2 00 	sts	0x00E2, r24
			break;
     8c6:	49 c0       	rjmp	.+146    	; 0x95a <changeColor+0xda>
		}else{
			color = 2;
     8c8:	82 e0       	ldi	r24, 0x02	; 2
     8ca:	80 93 e4 00 	sts	0x00E4, r24
			break;
     8ce:	45 c0       	rjmp	.+138    	; 0x95a <changeColor+0xda>
		}
		
		// Remove Red
		case 2:
		if(red != 0){
     8d0:	80 91 e3 00 	lds	r24, 0x00E3
     8d4:	88 23       	and	r24, r24
     8d6:	31 f0       	breq	.+12     	; 0x8e4 <changeColor+0x64>
			red--;
     8d8:	80 91 e3 00 	lds	r24, 0x00E3
     8dc:	81 50       	subi	r24, 0x01	; 1
     8de:	80 93 e3 00 	sts	0x00E3, r24
			break;
     8e2:	3b c0       	rjmp	.+118    	; 0x95a <changeColor+0xda>
		}else{
			color = 3;
     8e4:	83 e0       	ldi	r24, 0x03	; 3
     8e6:	80 93 e4 00 	sts	0x00E4, r24
			break;
     8ea:	37 c0       	rjmp	.+110    	; 0x95a <changeColor+0xda>
		}

		// Add blue
		case 3:
		if(blue != 15){
     8ec:	80 91 e1 00 	lds	r24, 0x00E1
     8f0:	8f 30       	cpi	r24, 0x0F	; 15
     8f2:	31 f0       	breq	.+12     	; 0x900 <changeColor+0x80>
			blue++;
     8f4:	80 91 e1 00 	lds	r24, 0x00E1
     8f8:	8f 5f       	subi	r24, 0xFF	; 255
     8fa:	80 93 e1 00 	sts	0x00E1, r24
			break;
     8fe:	2d c0       	rjmp	.+90     	; 0x95a <changeColor+0xda>
		}else{
			color = 4;
     900:	84 e0       	ldi	r24, 0x04	; 4
     902:	80 93 e4 00 	sts	0x00E4, r24
			break;
     906:	29 c0       	rjmp	.+82     	; 0x95a <changeColor+0xda>
		}

		// Remove Green
		case 4:
		if(green != 0){
     908:	80 91 e2 00 	lds	r24, 0x00E2
     90c:	88 23       	and	r24, r24
     90e:	31 f0       	breq	.+12     	; 0x91c <changeColor+0x9c>
			green--;
     910:	80 91 e2 00 	lds	r24, 0x00E2
     914:	81 50       	subi	r24, 0x01	; 1
     916:	80 93 e2 00 	sts	0x00E2, r24
			break;
     91a:	1f c0       	rjmp	.+62     	; 0x95a <changeColor+0xda>
		}else{
			color = 5;
     91c:	85 e0       	ldi	r24, 0x05	; 5
     91e:	80 93 e4 00 	sts	0x00E4, r24
			break;
     922:	1b c0       	rjmp	.+54     	; 0x95a <changeColor+0xda>
		}
		
		// Add Red
		case 5:
		if(red != 15){
     924:	80 91 e3 00 	lds	r24, 0x00E3
     928:	8f 30       	cpi	r24, 0x0F	; 15
     92a:	31 f0       	breq	.+12     	; 0x938 <changeColor+0xb8>
			red++;
     92c:	80 91 e3 00 	lds	r24, 0x00E3
     930:	8f 5f       	subi	r24, 0xFF	; 255
     932:	80 93 e3 00 	sts	0x00E3, r24
			break;
     936:	11 c0       	rjmp	.+34     	; 0x95a <changeColor+0xda>
		}else{
			color = 6;
     938:	86 e0       	ldi	r24, 0x06	; 6
     93a:	80 93 e4 00 	sts	0x00E4, r24
			break;
     93e:	0d c0       	rjmp	.+26     	; 0x95a <changeColor+0xda>
		}
		
		// Remove blue
		case 6:
		if(blue != 0){
     940:	80 91 e1 00 	lds	r24, 0x00E1
     944:	88 23       	and	r24, r24
     946:	31 f0       	breq	.+12     	; 0x954 <changeColor+0xd4>
			blue--;
     948:	80 91 e1 00 	lds	r24, 0x00E1
     94c:	81 50       	subi	r24, 0x01	; 1
     94e:	80 93 e1 00 	sts	0x00E1, r24
			break;
     952:	03 c0       	rjmp	.+6      	; 0x95a <changeColor+0xda>
		}else{
			color = 1;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	80 93 e4 00 	sts	0x00E4, r24
			break;
		}
	}

	RGB[0][0] = red;
     95a:	80 91 e3 00 	lds	r24, 0x00E3
     95e:	e7 ee       	ldi	r30, 0xE7	; 231
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	80 83       	st	Z, r24
	RGB[1][0] = red;
     964:	80 91 e3 00 	lds	r24, 0x00E3
     968:	83 83       	std	Z+3, r24	; 0x03
	RGB[0][1] = green;
     96a:	80 91 e2 00 	lds	r24, 0x00E2
     96e:	81 83       	std	Z+1, r24	; 0x01
	RGB[1][1] = green;
     970:	80 91 e2 00 	lds	r24, 0x00E2
     974:	84 83       	std	Z+4, r24	; 0x04
	RGB[0][2] = blue;
     976:	80 91 e1 00 	lds	r24, 0x00E1
     97a:	82 83       	std	Z+2, r24	; 0x02
	RGB[1][2] = blue;
     97c:	80 91 e1 00 	lds	r24, 0x00E1
     980:	85 83       	std	Z+5, r24	; 0x05
     982:	08 95       	ret

00000984 <calcPWM>:

// Set the duty cycle for the leds
void calcPWM(){

	// Red Left
	if(RGB[0][0] <= pwm){
     984:	80 91 e6 00 	lds	r24, 0x00E6
     988:	90 91 e7 00 	lds	r25, 0x00E7
     98c:	89 17       	cp	r24, r25
     98e:	30 f0       	brcs	.+12     	; 0x99c <calcPWM+0x18>
		ledBank1 |= (1<<1); //off
     990:	80 91 68 00 	lds	r24, 0x0068
     994:	82 60       	ori	r24, 0x02	; 2
     996:	80 93 68 00 	sts	0x0068, r24
     99a:	05 c0       	rjmp	.+10     	; 0x9a6 <calcPWM+0x22>
	}else{
		ledBank1 &= ~(1<<1); //on
     99c:	80 91 68 00 	lds	r24, 0x0068
     9a0:	8d 7f       	andi	r24, 0xFD	; 253
     9a2:	80 93 68 00 	sts	0x0068, r24
	}
	
	// Green Left
	if(RGB[0][1] <= pwm){
     9a6:	80 91 e6 00 	lds	r24, 0x00E6
     9aa:	90 91 e8 00 	lds	r25, 0x00E8
     9ae:	89 17       	cp	r24, r25
     9b0:	30 f0       	brcs	.+12     	; 0x9be <calcPWM+0x3a>
		ledBank1 |= (1<<2);
     9b2:	80 91 68 00 	lds	r24, 0x0068
     9b6:	84 60       	ori	r24, 0x04	; 4
     9b8:	80 93 68 00 	sts	0x0068, r24
     9bc:	05 c0       	rjmp	.+10     	; 0x9c8 <calcPWM+0x44>
	}else{
		ledBank1 &= ~(1<<2);
     9be:	80 91 68 00 	lds	r24, 0x0068
     9c2:	8b 7f       	andi	r24, 0xFB	; 251
     9c4:	80 93 68 00 	sts	0x0068, r24
	}

	// Blue Left
	if(RGB[0][2] <= pwm){
     9c8:	80 91 e6 00 	lds	r24, 0x00E6
     9cc:	90 91 e9 00 	lds	r25, 0x00E9
     9d0:	89 17       	cp	r24, r25
     9d2:	30 f0       	brcs	.+12     	; 0x9e0 <calcPWM+0x5c>
		ledBank1 |= (1<<3);
     9d4:	80 91 68 00 	lds	r24, 0x0068
     9d8:	88 60       	ori	r24, 0x08	; 8
     9da:	80 93 68 00 	sts	0x0068, r24
     9de:	05 c0       	rjmp	.+10     	; 0x9ea <calcPWM+0x66>
	}else{
		ledBank1 &= ~(1<<3);
     9e0:	80 91 68 00 	lds	r24, 0x0068
     9e4:	87 7f       	andi	r24, 0xF7	; 247
     9e6:	80 93 68 00 	sts	0x0068, r24
	}
	
	// Red Right
	if(RGB[1][0] <= pwm){
     9ea:	80 91 e6 00 	lds	r24, 0x00E6
     9ee:	90 91 ea 00 	lds	r25, 0x00EA
     9f2:	89 17       	cp	r24, r25
     9f4:	30 f0       	brcs	.+12     	; 0xa02 <calcPWM+0x7e>
		ledBank1 |= (1<<7);
     9f6:	80 91 68 00 	lds	r24, 0x0068
     9fa:	80 68       	ori	r24, 0x80	; 128
     9fc:	80 93 68 00 	sts	0x0068, r24
     a00:	05 c0       	rjmp	.+10     	; 0xa0c <calcPWM+0x88>
	}else{
		ledBank1 &= ~(1<<7);
     a02:	80 91 68 00 	lds	r24, 0x0068
     a06:	8f 77       	andi	r24, 0x7F	; 127
     a08:	80 93 68 00 	sts	0x0068, r24
	}

	// Green Right
	if(RGB[1][1] <= pwm){
     a0c:	80 91 e6 00 	lds	r24, 0x00E6
     a10:	90 91 eb 00 	lds	r25, 0x00EB
     a14:	89 17       	cp	r24, r25
     a16:	30 f0       	brcs	.+12     	; 0xa24 <calcPWM+0xa0>
		ledBank1 |= (1<<6);
     a18:	80 91 68 00 	lds	r24, 0x0068
     a1c:	80 64       	ori	r24, 0x40	; 64
     a1e:	80 93 68 00 	sts	0x0068, r24
     a22:	05 c0       	rjmp	.+10     	; 0xa2e <calcPWM+0xaa>
	}else{
		ledBank1 &= ~(1<<6);
     a24:	80 91 68 00 	lds	r24, 0x0068
     a28:	8f 7b       	andi	r24, 0xBF	; 191
     a2a:	80 93 68 00 	sts	0x0068, r24
	}

	// Blue Right
	if(RGB[1][2] <= pwm){
     a2e:	80 91 e6 00 	lds	r24, 0x00E6
     a32:	90 91 ec 00 	lds	r25, 0x00EC
     a36:	89 17       	cp	r24, r25
     a38:	30 f0       	brcs	.+12     	; 0xa46 <calcPWM+0xc2>
		ledBank1 |= (1<<5);
     a3a:	80 91 68 00 	lds	r24, 0x0068
     a3e:	80 62       	ori	r24, 0x20	; 32
     a40:	80 93 68 00 	sts	0x0068, r24
     a44:	08 95       	ret
	}else{
		ledBank1 &= ~(1<<5);
     a46:	80 91 68 00 	lds	r24, 0x0068
     a4a:	8f 7d       	andi	r24, 0xDF	; 223
     a4c:	80 93 68 00 	sts	0x0068, r24
     a50:	08 95       	ret

00000a52 <__vector_4>:

/////////////////////////////////////////////////////////////////////////
//                       Interrupt service routines                    //
/////////////////////////////////////////////////////////////////////////

ISR(TIMER2_COMP_vect){
     a52:	1f 92       	push	r1
     a54:	0f 92       	push	r0
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	0f 92       	push	r0
     a5a:	11 24       	eor	r1, r1
     a5c:	2f 93       	push	r18
     a5e:	3f 93       	push	r19
     a60:	4f 93       	push	r20
     a62:	5f 93       	push	r21
     a64:	6f 93       	push	r22
     a66:	7f 93       	push	r23
     a68:	8f 93       	push	r24
     a6a:	9f 93       	push	r25
     a6c:	af 93       	push	r26
     a6e:	bf 93       	push	r27
     a70:	ef 93       	push	r30
     a72:	ff 93       	push	r31

	// PWM  count 0-15
	pwm++;
     a74:	80 91 e6 00 	lds	r24, 0x00E6
     a78:	8f 5f       	subi	r24, 0xFF	; 255
     a7a:	80 93 e6 00 	sts	0x00E6, r24
	if(pwm > 15){
     a7e:	80 91 e6 00 	lds	r24, 0x00E6
     a82:	80 31       	cpi	r24, 0x10	; 16
     a84:	10 f0       	brcs	.+4      	; 0xa8a <__vector_4+0x38>
		pwm = 0;
     a86:	10 92 e6 00 	sts	0x00E6, r1
	}
	
	// Set new values for LED's
	counter++;
     a8a:	80 91 e5 00 	lds	r24, 0x00E5
     a8e:	8f 5f       	subi	r24, 0xFF	; 255
     a90:	80 93 e5 00 	sts	0x00E5, r24
	if(counter == 100){
     a94:	80 91 e5 00 	lds	r24, 0x00E5
     a98:	84 36       	cpi	r24, 0x64	; 100
     a9a:	21 f4       	brne	.+8      	; 0xaa4 <__vector_4+0x52>
		counter = 0;
     a9c:	10 92 e5 00 	sts	0x00E5, r1
		changeColor();
     aa0:	0e 94 40 04 	call	0x880	; 0x880 <changeColor>
	}	

	// Update all LED's
	calcPWM();
     aa4:	0e 94 c2 04 	call	0x984	; 0x984 <calcPWM>
	LEDUpdate();
     aa8:	0e 94 c8 03 	call	0x790	; 0x790 <LEDUpdate>
}
     aac:	ff 91       	pop	r31
     aae:	ef 91       	pop	r30
     ab0:	bf 91       	pop	r27
     ab2:	af 91       	pop	r26
     ab4:	9f 91       	pop	r25
     ab6:	8f 91       	pop	r24
     ab8:	7f 91       	pop	r23
     aba:	6f 91       	pop	r22
     abc:	5f 91       	pop	r21
     abe:	4f 91       	pop	r20
     ac0:	3f 91       	pop	r19
     ac2:	2f 91       	pop	r18
     ac4:	0f 90       	pop	r0
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	0f 90       	pop	r0
     aca:	1f 90       	pop	r1
     acc:	18 95       	reti

00000ace <Initialize>:
	return 0;
}

void Initialize()
{
	initMotorControl();
     ace:	0e 94 91 05 	call	0xb22	; 0xb22 <initMotorControl>
	initFloorSensor();
     ad2:	0e 94 a4 02 	call	0x548	; 0x548 <initFloorSensor>
	LCDInit(16);
     ad6:	80 e1       	ldi	r24, 0x10	; 16
     ad8:	0e 94 32 03 	call	0x664	; 0x664 <LCDInit>
	LEDInit();
     adc:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LEDInit>
	AdcInit();
     ae0:	0e 94 58 00 	call	0xb0	; 0xb0 <AdcInit>
	USARTInit(31);
     ae4:	8f e1       	ldi	r24, 0x1F	; 31
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 5c 00 	call	0xb8	; 0xb8 <USARTInit>
	LEDEnable();
     aec:	0e 94 e5 03 	call	0x7ca	; 0x7ca <LEDEnable>
	enableHBridge();
     af0:	0e 94 bf 05 	call	0xb7e	; 0xb7e <enableHBridge>
	SetInterrupt();
     af4:	78 94       	sei
     af6:	08 95       	ret

00000af8 <main>:

void Initialize();

int main(void) {

	Initialize();
     af8:	0e 94 67 05 	call	0xace	; 0xace <Initialize>

	while(1)
	{
		// Update voltage LED's
		LEDVoltage();
     afc:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LEDVoltage>
		
		//test();
		
		buttonMenu();
     b00:	0e 94 53 02 	call	0x4a6	; 0x4a6 <buttonMenu>
				_delay_ms(3);
			}
			
			setRunWallFlag(true);
		}*/
		setDirectionMotorL(0);
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	0e 94 d7 05 	call	0xbae	; 0xbae <setDirectionMotorL>
		setDirectionMotorR(0);
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <setDirectionMotorR>
		setDutyCycleMotorL(250);
     b10:	8a ef       	ldi	r24, 0xFA	; 250
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 cb 05 	call	0xb96	; 0xb96 <setDutyCycleMotorL>
		setDutyCycleMotorR(250);
     b18:	8a ef       	ldi	r24, 0xFA	; 250
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 d1 05 	call	0xba2	; 0xba2 <setDutyCycleMotorR>
		

		//runObstacle();
	
	
	}
     b20:	ed cf       	rjmp	.-38     	; 0xafc <main+0x4>

00000b22 <initMotorControl>:

// Initialize the motor control.
void initMotorControl(void){

	// Set the directions.
	setOutput(DDRD, BRIDGE_A1);
     b22:	8d 9a       	sbi	0x11, 5	; 17
	setOutput(DDRD, BRIDGE_A2);
     b24:	8f 9a       	sbi	0x11, 7	; 17
	setOutput(DDRD, BRIDGE_A3);
     b26:	8c 9a       	sbi	0x11, 4	; 17
	setOutput(DDRD, BRIDGE_A4);
     b28:	8e 9a       	sbi	0x11, 6	; 17
	setOutput(DDRD, BRIDGE_EN);
     b2a:	88 9a       	sbi	0x11, 0	; 17
	setInput(DDRD, MOTOR_L_A);
     b2c:	8b 98       	cbi	0x11, 3	; 17
	setInput(DDRD, MOTOR_R_A);
     b2e:	8a 98       	cbi	0x11, 2	; 17


	// Set the initial output values for outputs.
	setLow(PORTD, BRIDGE_A1);
     b30:	95 98       	cbi	0x12, 5	; 18
	setHigh(PORTD, BRIDGE_A2);
     b32:	97 9a       	sbi	0x12, 7	; 18
	setLow(PORTD, BRIDGE_A3);
     b34:	94 98       	cbi	0x12, 4	; 18
	setHigh(PORTD, BRIDGE_A4);
     b36:	96 9a       	sbi	0x12, 6	; 18
	setLow(PORTC, BRIDGE_EN);
     b38:	a8 98       	cbi	0x15, 0	; 21


	// Initilize Timer/counter 1
	TCCR1A = 0b10100010;
     b3a:	82 ea       	ldi	r24, 0xA2	; 162
     b3c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00011001;
     b3e:	89 e1       	ldi	r24, 0x19	; 25
     b40:	8e bd       	out	0x2e, r24	; 46
	// Waveform generation mode (WGM) set to 14 (fast PWM TOP is ICR1)
	// Input capture noise canceler (ICNC1) disabled, Input capture Edge select (ICES1) set to falling edge.
	// NOTE: when ICR1 is set to TOP the input capture function is disabled thus ICES1 and ICNC1 are cleared.
	// no prescaler is used clk/1

	TCNT1 = 0; 		//reset counter1
     b42:	1d bc       	out	0x2d, r1	; 45
     b44:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 250; 	//speed of Left Motor 0-250
     b46:	8a ef       	ldi	r24, 0xFA	; 250
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	9b bd       	out	0x2b, r25	; 43
     b4c:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 250; 	//speed of Right Motor 0-250
     b4e:	99 bd       	out	0x29, r25	; 41
     b50:	88 bd       	out	0x28, r24	; 40
	ICR1 = 250; 	// Top value for TCNT1 defines the freq of the PMW (10MHz / 250 = 40 kHz)
     b52:	97 bd       	out	0x27, r25	; 39
     b54:	86 bd       	out	0x26, r24	; 38


	// Initilize Timer/Counter 0		
	TCCR0 = 0b00001101;
     b56:	8d e0       	ldi	r24, 0x0D	; 13
     b58:	83 bf       	out	0x33, r24	; 51
	// WGM CTC, OCR0 is TOP
	// OC0 disconnected.
	// clk/1024 prescaler = 9,765.625 Hz
	
	TCNT0 = 0;	// reset counter0
     b5a:	12 be       	out	0x32, r1	; 50
	OCR0 = 98;	// Counter divisor 9,765.625/98 = 99,64923469 Hz ~ 10 ms period
     b5c:	82 e6       	ldi	r24, 0x62	; 98
     b5e:	8c bf       	out	0x3c, r24	; 60

	// Enabled Timer/Counter0 Compare Match interrupt.
	TIMSK |= 2;
     b60:	89 b7       	in	r24, 0x39	; 57
     b62:	82 60       	ori	r24, 0x02	; 2
     b64:	89 bf       	out	0x39, r24	; 57


	// External interrupts... 
	//General Interrupt Control Register
	GICR |= 0b11000000;
     b66:	8b b7       	in	r24, 0x3b	; 59
     b68:	80 6c       	ori	r24, 0xC0	; 192
     b6a:	8b bf       	out	0x3b, r24	; 59
	// bit 6 = 1 = Enable INT1
	// bit 7 = 1 = Enable INT0

	//MCU Control Register
	MCUCR |= 0b00001111;
     b6c:	85 b7       	in	r24, 0x35	; 53
     b6e:	8f 60       	ori	r24, 0x0F	; 15
     b70:	85 bf       	out	0x35, r24	; 53
	// bit1, bit0 = 11 = positive logical change on INT0 generates an interupt request.
	// bit3, bit2 = 11 = positive logical change on INT1 generates an interupt request

	//MSU Control and Status Register
	MCUCSR |= 0b00000000;
     b72:	84 b7       	in	r24, 0x34	; 52
     b74:	84 bf       	out	0x34, r24	; 52

	// General Interrupt Flag Register
	GIFR   |= 0b11000000;
     b76:	8a b7       	in	r24, 0x3a	; 58
     b78:	80 6c       	ori	r24, 0xC0	; 192
     b7a:	8a bf       	out	0x3a, r24	; 58
     b7c:	08 95       	ret

00000b7e <enableHBridge>:
}

// Enable outputs on the H-bridge
void enableHBridge(void){
	setHigh(PORTC, BRIDGE_EN);
     b7e:	a8 9a       	sbi	0x15, 0	; 21
     b80:	08 95       	ret

00000b82 <limitDutyCycle>:
	OCR1B = limitDutyCycle(duty);	
}


// Limits for the DutyCycle
uint8_t limitDutyCycle(signed int duty){
     b82:	8b 3f       	cpi	r24, 0xFB	; 251
     b84:	91 05       	cpc	r25, r1
     b86:	14 f0       	brlt	.+4      	; 0xb8c <limitDutyCycle+0xa>
     b88:	8a ef       	ldi	r24, 0xFA	; 250
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	99 23       	and	r25, r25
     b8e:	14 f4       	brge	.+4      	; 0xb94 <limitDutyCycle+0x12>
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
	}
	if(duty<0){
		duty = 0;
	}
	return duty;
}
     b94:	08 95       	ret

00000b96 <setDutyCycleMotorL>:
}

// Set duty cycle for Left Motor 0-100%
void setDutyCycleMotorL(signed int duty){
	
	OCR1A = limitDutyCycle(duty);
     b96:	0e 94 c1 05 	call	0xb82	; 0xb82 <limitDutyCycle>
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	9b bd       	out	0x2b, r25	; 43
     b9e:	8a bd       	out	0x2a, r24	; 42
     ba0:	08 95       	ret

00000ba2 <setDutyCycleMotorR>:
}

// Set duty cycle for Right Motor 0-100%
void setDutyCycleMotorR(signed int duty){
	
	OCR1B = limitDutyCycle(duty);	
     ba2:	0e 94 c1 05 	call	0xb82	; 0xb82 <limitDutyCycle>
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	99 bd       	out	0x29, r25	; 41
     baa:	88 bd       	out	0x28, r24	; 40
     bac:	08 95       	ret

00000bae <setDirectionMotorL>:
}

// Set direction for Left Motor. 0 forward, 1 backward
void setDirectionMotorL(uint8_t dir){

	if(dir)
     bae:	88 23       	and	r24, r24
     bb0:	29 f0       	breq	.+10     	; 0xbbc <setDirectionMotorL+0xe>
	{
		setLow(PORTD, BRIDGE_A2);
     bb2:	97 98       	cbi	0x12, 7	; 18
		TCCR1A &= ~(1 << 6);
     bb4:	8f b5       	in	r24, 0x2f	; 47
     bb6:	8f 7b       	andi	r24, 0xBF	; 191
     bb8:	8f bd       	out	0x2f, r24	; 47
     bba:	08 95       	ret
	}
	else
	{
		setHigh(PORTD, BRIDGE_A2);	
     bbc:	97 9a       	sbi	0x12, 7	; 18
		TCCR1A |= 1 << 6;
     bbe:	8f b5       	in	r24, 0x2f	; 47
     bc0:	80 64       	ori	r24, 0x40	; 64
     bc2:	8f bd       	out	0x2f, r24	; 47
     bc4:	08 95       	ret

00000bc6 <setDirectionMotorR>:
}

// Set direction for Right Motor 0 forward, 1 backward
void setDirectionMotorR(uint8_t dir){

	if(dir){
     bc6:	88 23       	and	r24, r24
     bc8:	29 f0       	breq	.+10     	; 0xbd4 <setDirectionMotorR+0xe>
		setLow(PORTD, BRIDGE_A4);
     bca:	96 98       	cbi	0x12, 6	; 18
		TCCR1A &= ~(1 << 4); 
     bcc:	8f b5       	in	r24, 0x2f	; 47
     bce:	8f 7e       	andi	r24, 0xEF	; 239
     bd0:	8f bd       	out	0x2f, r24	; 47
     bd2:	08 95       	ret
	}else{
		setHigh(PORTD, BRIDGE_A4);
     bd4:	96 9a       	sbi	0x12, 6	; 18
		TCCR1A |= 1 << 4; 
     bd6:	8f b5       	in	r24, 0x2f	; 47
     bd8:	80 61       	ori	r24, 0x10	; 16
     bda:	8f bd       	out	0x2f, r24	; 47
     bdc:	08 95       	ret

00000bde <__vector_1>:
/////////////////////////////////////////////////////////////////////////
//                       Interrupt service routines                    //
/////////////////////////////////////////////////////////////////////////

// Interrupt from SensorA, Right Motor
ISR(INT0_vect){
     bde:	1f 92       	push	r1
     be0:	0f 92       	push	r0
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	0f 92       	push	r0
     be6:	11 24       	eor	r1, r1
     be8:	8f 93       	push	r24
	sensorMotorR_temp++;
     bea:	80 91 f2 00 	lds	r24, 0x00F2
     bee:	8f 5f       	subi	r24, 0xFF	; 255
     bf0:	80 93 f2 00 	sts	0x00F2, r24
}
     bf4:	8f 91       	pop	r24
     bf6:	0f 90       	pop	r0
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	0f 90       	pop	r0
     bfc:	1f 90       	pop	r1
     bfe:	18 95       	reti

00000c00 <__vector_2>:

// Interrupt from SensorB, Left Motor
ISR(INT1_vect){
     c00:	1f 92       	push	r1
     c02:	0f 92       	push	r0
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	0f 92       	push	r0
     c08:	11 24       	eor	r1, r1
     c0a:	8f 93       	push	r24
	sensorMotorL_temp++;
     c0c:	80 91 f1 00 	lds	r24, 0x00F1
     c10:	8f 5f       	subi	r24, 0xFF	; 255
     c12:	80 93 f1 00 	sts	0x00F1, r24
}
     c16:	8f 91       	pop	r24
     c18:	0f 90       	pop	r0
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	0f 90       	pop	r0
     c1e:	1f 90       	pop	r1
     c20:	18 95       	reti

00000c22 <__vector_10>:

// Safe current value of counts from the sensors every ~10ms and clear the counters.
ISR(TIMER0_COMP_vect){
     c22:	1f 92       	push	r1
     c24:	0f 92       	push	r0
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	0f 92       	push	r0
     c2a:	11 24       	eor	r1, r1
     c2c:	8f 93       	push	r24
	sensorMotorR = sensorMotorR_temp;
     c2e:	80 91 f2 00 	lds	r24, 0x00F2
     c32:	80 93 f0 00 	sts	0x00F0, r24
	sensorMotorR_temp = 0;
     c36:	10 92 f2 00 	sts	0x00F2, r1
	sensorMotorL = sensorMotorL_temp;
     c3a:	80 91 f1 00 	lds	r24, 0x00F1
     c3e:	80 93 ef 00 	sts	0x00EF, r24
	sensorMotorL_temp = 0;
     c42:	10 92 f1 00 	sts	0x00F1, r1
	sensorUpdateFlag = 1;
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	80 93 ee 00 	sts	0x00EE, r24
}
     c4c:	8f 91       	pop	r24
     c4e:	0f 90       	pop	r0
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	0f 90       	pop	r0
     c54:	1f 90       	pop	r1
     c56:	18 95       	reti

00000c58 <__tablejump2__>:
     c58:	ee 0f       	add	r30, r30
     c5a:	ff 1f       	adc	r31, r31
     c5c:	05 90       	lpm	r0, Z+
     c5e:	f4 91       	lpm	r31, Z
     c60:	e0 2d       	mov	r30, r0
     c62:	09 94       	ijmp

00000c64 <sprintf>:
     c64:	ae e0       	ldi	r26, 0x0E	; 14
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e8 e3       	ldi	r30, 0x38	; 56
     c6a:	f6 e0       	ldi	r31, 0x06	; 6
     c6c:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__prologue_saves__+0x1c>
     c70:	0d 89       	ldd	r16, Y+21	; 0x15
     c72:	1e 89       	ldd	r17, Y+22	; 0x16
     c74:	86 e0       	ldi	r24, 0x06	; 6
     c76:	8c 83       	std	Y+4, r24	; 0x04
     c78:	1a 83       	std	Y+2, r17	; 0x02
     c7a:	09 83       	std	Y+1, r16	; 0x01
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	9f e7       	ldi	r25, 0x7F	; 127
     c80:	9e 83       	std	Y+6, r25	; 0x06
     c82:	8d 83       	std	Y+5, r24	; 0x05
     c84:	ae 01       	movw	r20, r28
     c86:	47 5e       	subi	r20, 0xE7	; 231
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	6f 89       	ldd	r22, Y+23	; 0x17
     c8c:	78 8d       	ldd	r23, Y+24	; 0x18
     c8e:	ce 01       	movw	r24, r28
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	0e 94 55 06 	call	0xcaa	; 0xcaa <vfprintf>
     c96:	2f 81       	ldd	r18, Y+7	; 0x07
     c98:	38 85       	ldd	r19, Y+8	; 0x08
     c9a:	f8 01       	movw	r30, r16
     c9c:	e2 0f       	add	r30, r18
     c9e:	f3 1f       	adc	r31, r19
     ca0:	10 82       	st	Z, r1
     ca2:	2e 96       	adiw	r28, 0x0e	; 14
     ca4:	e4 e0       	ldi	r30, 0x04	; 4
     ca6:	0c 94 fd 08 	jmp	0x11fa	; 0x11fa <__epilogue_restores__+0x1c>

00000caa <vfprintf>:
     caa:	ac e0       	ldi	r26, 0x0C	; 12
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	eb e5       	ldi	r30, 0x5B	; 91
     cb0:	f6 e0       	ldi	r31, 0x06	; 6
     cb2:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__prologue_saves__>
     cb6:	7c 01       	movw	r14, r24
     cb8:	6b 01       	movw	r12, r22
     cba:	8a 01       	movw	r16, r20
     cbc:	fc 01       	movw	r30, r24
     cbe:	17 82       	std	Z+7, r1	; 0x07
     cc0:	16 82       	std	Z+6, r1	; 0x06
     cc2:	83 81       	ldd	r24, Z+3	; 0x03
     cc4:	81 ff       	sbrs	r24, 1
     cc6:	bd c1       	rjmp	.+890    	; 0x1042 <vfprintf+0x398>
     cc8:	ce 01       	movw	r24, r28
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	4c 01       	movw	r8, r24
     cce:	f7 01       	movw	r30, r14
     cd0:	93 81       	ldd	r25, Z+3	; 0x03
     cd2:	f6 01       	movw	r30, r12
     cd4:	93 fd       	sbrc	r25, 3
     cd6:	85 91       	lpm	r24, Z+
     cd8:	93 ff       	sbrs	r25, 3
     cda:	81 91       	ld	r24, Z+
     cdc:	6f 01       	movw	r12, r30
     cde:	88 23       	and	r24, r24
     ce0:	09 f4       	brne	.+2      	; 0xce4 <vfprintf+0x3a>
     ce2:	ab c1       	rjmp	.+854    	; 0x103a <vfprintf+0x390>
     ce4:	85 32       	cpi	r24, 0x25	; 37
     ce6:	39 f4       	brne	.+14     	; 0xcf6 <vfprintf+0x4c>
     ce8:	93 fd       	sbrc	r25, 3
     cea:	85 91       	lpm	r24, Z+
     cec:	93 ff       	sbrs	r25, 3
     cee:	81 91       	ld	r24, Z+
     cf0:	6f 01       	movw	r12, r30
     cf2:	85 32       	cpi	r24, 0x25	; 37
     cf4:	29 f4       	brne	.+10     	; 0xd00 <vfprintf+0x56>
     cf6:	b7 01       	movw	r22, r14
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 3d 08 	call	0x107a	; 0x107a <fputc>
     cfe:	e7 cf       	rjmp	.-50     	; 0xcce <vfprintf+0x24>
     d00:	51 2c       	mov	r5, r1
     d02:	31 2c       	mov	r3, r1
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	20 32       	cpi	r18, 0x20	; 32
     d08:	a0 f4       	brcc	.+40     	; 0xd32 <vfprintf+0x88>
     d0a:	8b 32       	cpi	r24, 0x2B	; 43
     d0c:	69 f0       	breq	.+26     	; 0xd28 <vfprintf+0x7e>
     d0e:	30 f4       	brcc	.+12     	; 0xd1c <vfprintf+0x72>
     d10:	80 32       	cpi	r24, 0x20	; 32
     d12:	59 f0       	breq	.+22     	; 0xd2a <vfprintf+0x80>
     d14:	83 32       	cpi	r24, 0x23	; 35
     d16:	69 f4       	brne	.+26     	; 0xd32 <vfprintf+0x88>
     d18:	20 61       	ori	r18, 0x10	; 16
     d1a:	2c c0       	rjmp	.+88     	; 0xd74 <vfprintf+0xca>
     d1c:	8d 32       	cpi	r24, 0x2D	; 45
     d1e:	39 f0       	breq	.+14     	; 0xd2e <vfprintf+0x84>
     d20:	80 33       	cpi	r24, 0x30	; 48
     d22:	39 f4       	brne	.+14     	; 0xd32 <vfprintf+0x88>
     d24:	21 60       	ori	r18, 0x01	; 1
     d26:	26 c0       	rjmp	.+76     	; 0xd74 <vfprintf+0xca>
     d28:	22 60       	ori	r18, 0x02	; 2
     d2a:	24 60       	ori	r18, 0x04	; 4
     d2c:	23 c0       	rjmp	.+70     	; 0xd74 <vfprintf+0xca>
     d2e:	28 60       	ori	r18, 0x08	; 8
     d30:	21 c0       	rjmp	.+66     	; 0xd74 <vfprintf+0xca>
     d32:	27 fd       	sbrc	r18, 7
     d34:	27 c0       	rjmp	.+78     	; 0xd84 <vfprintf+0xda>
     d36:	30 ed       	ldi	r19, 0xD0	; 208
     d38:	38 0f       	add	r19, r24
     d3a:	3a 30       	cpi	r19, 0x0A	; 10
     d3c:	78 f4       	brcc	.+30     	; 0xd5c <vfprintf+0xb2>
     d3e:	26 ff       	sbrs	r18, 6
     d40:	06 c0       	rjmp	.+12     	; 0xd4e <vfprintf+0xa4>
     d42:	fa e0       	ldi	r31, 0x0A	; 10
     d44:	5f 9e       	mul	r5, r31
     d46:	30 0d       	add	r19, r0
     d48:	11 24       	eor	r1, r1
     d4a:	53 2e       	mov	r5, r19
     d4c:	13 c0       	rjmp	.+38     	; 0xd74 <vfprintf+0xca>
     d4e:	8a e0       	ldi	r24, 0x0A	; 10
     d50:	38 9e       	mul	r3, r24
     d52:	30 0d       	add	r19, r0
     d54:	11 24       	eor	r1, r1
     d56:	33 2e       	mov	r3, r19
     d58:	20 62       	ori	r18, 0x20	; 32
     d5a:	0c c0       	rjmp	.+24     	; 0xd74 <vfprintf+0xca>
     d5c:	8e 32       	cpi	r24, 0x2E	; 46
     d5e:	21 f4       	brne	.+8      	; 0xd68 <vfprintf+0xbe>
     d60:	26 fd       	sbrc	r18, 6
     d62:	6b c1       	rjmp	.+726    	; 0x103a <vfprintf+0x390>
     d64:	20 64       	ori	r18, 0x40	; 64
     d66:	06 c0       	rjmp	.+12     	; 0xd74 <vfprintf+0xca>
     d68:	8c 36       	cpi	r24, 0x6C	; 108
     d6a:	11 f4       	brne	.+4      	; 0xd70 <vfprintf+0xc6>
     d6c:	20 68       	ori	r18, 0x80	; 128
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <vfprintf+0xca>
     d70:	88 36       	cpi	r24, 0x68	; 104
     d72:	41 f4       	brne	.+16     	; 0xd84 <vfprintf+0xda>
     d74:	f6 01       	movw	r30, r12
     d76:	93 fd       	sbrc	r25, 3
     d78:	85 91       	lpm	r24, Z+
     d7a:	93 ff       	sbrs	r25, 3
     d7c:	81 91       	ld	r24, Z+
     d7e:	6f 01       	movw	r12, r30
     d80:	81 11       	cpse	r24, r1
     d82:	c1 cf       	rjmp	.-126    	; 0xd06 <vfprintf+0x5c>
     d84:	98 2f       	mov	r25, r24
     d86:	9f 7d       	andi	r25, 0xDF	; 223
     d88:	95 54       	subi	r25, 0x45	; 69
     d8a:	93 30       	cpi	r25, 0x03	; 3
     d8c:	28 f4       	brcc	.+10     	; 0xd98 <vfprintf+0xee>
     d8e:	0c 5f       	subi	r16, 0xFC	; 252
     d90:	1f 4f       	sbci	r17, 0xFF	; 255
     d92:	ff e3       	ldi	r31, 0x3F	; 63
     d94:	f9 83       	std	Y+1, r31	; 0x01
     d96:	0d c0       	rjmp	.+26     	; 0xdb2 <vfprintf+0x108>
     d98:	83 36       	cpi	r24, 0x63	; 99
     d9a:	31 f0       	breq	.+12     	; 0xda8 <vfprintf+0xfe>
     d9c:	83 37       	cpi	r24, 0x73	; 115
     d9e:	71 f0       	breq	.+28     	; 0xdbc <vfprintf+0x112>
     da0:	83 35       	cpi	r24, 0x53	; 83
     da2:	09 f0       	breq	.+2      	; 0xda6 <vfprintf+0xfc>
     da4:	5b c0       	rjmp	.+182    	; 0xe5c <vfprintf+0x1b2>
     da6:	22 c0       	rjmp	.+68     	; 0xdec <vfprintf+0x142>
     da8:	f8 01       	movw	r30, r16
     daa:	80 81       	ld	r24, Z
     dac:	89 83       	std	Y+1, r24	; 0x01
     dae:	0e 5f       	subi	r16, 0xFE	; 254
     db0:	1f 4f       	sbci	r17, 0xFF	; 255
     db2:	44 24       	eor	r4, r4
     db4:	43 94       	inc	r4
     db6:	51 2c       	mov	r5, r1
     db8:	54 01       	movw	r10, r8
     dba:	15 c0       	rjmp	.+42     	; 0xde6 <vfprintf+0x13c>
     dbc:	38 01       	movw	r6, r16
     dbe:	f2 e0       	ldi	r31, 0x02	; 2
     dc0:	6f 0e       	add	r6, r31
     dc2:	71 1c       	adc	r7, r1
     dc4:	f8 01       	movw	r30, r16
     dc6:	a0 80       	ld	r10, Z
     dc8:	b1 80       	ldd	r11, Z+1	; 0x01
     dca:	26 ff       	sbrs	r18, 6
     dcc:	03 c0       	rjmp	.+6      	; 0xdd4 <vfprintf+0x12a>
     dce:	65 2d       	mov	r22, r5
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <vfprintf+0x12e>
     dd4:	6f ef       	ldi	r22, 0xFF	; 255
     dd6:	7f ef       	ldi	r23, 0xFF	; 255
     dd8:	c5 01       	movw	r24, r10
     dda:	2c 87       	std	Y+12, r18	; 0x0c
     ddc:	0e 94 32 08 	call	0x1064	; 0x1064 <strnlen>
     de0:	2c 01       	movw	r4, r24
     de2:	83 01       	movw	r16, r6
     de4:	2c 85       	ldd	r18, Y+12	; 0x0c
     de6:	2f 77       	andi	r18, 0x7F	; 127
     de8:	22 2e       	mov	r2, r18
     dea:	17 c0       	rjmp	.+46     	; 0xe1a <vfprintf+0x170>
     dec:	38 01       	movw	r6, r16
     dee:	f2 e0       	ldi	r31, 0x02	; 2
     df0:	6f 0e       	add	r6, r31
     df2:	71 1c       	adc	r7, r1
     df4:	f8 01       	movw	r30, r16
     df6:	a0 80       	ld	r10, Z
     df8:	b1 80       	ldd	r11, Z+1	; 0x01
     dfa:	26 ff       	sbrs	r18, 6
     dfc:	03 c0       	rjmp	.+6      	; 0xe04 <vfprintf+0x15a>
     dfe:	65 2d       	mov	r22, r5
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <vfprintf+0x15e>
     e04:	6f ef       	ldi	r22, 0xFF	; 255
     e06:	7f ef       	ldi	r23, 0xFF	; 255
     e08:	c5 01       	movw	r24, r10
     e0a:	2c 87       	std	Y+12, r18	; 0x0c
     e0c:	0e 94 27 08 	call	0x104e	; 0x104e <strnlen_P>
     e10:	2c 01       	movw	r4, r24
     e12:	2c 85       	ldd	r18, Y+12	; 0x0c
     e14:	20 68       	ori	r18, 0x80	; 128
     e16:	22 2e       	mov	r2, r18
     e18:	83 01       	movw	r16, r6
     e1a:	23 fc       	sbrc	r2, 3
     e1c:	1b c0       	rjmp	.+54     	; 0xe54 <vfprintf+0x1aa>
     e1e:	83 2d       	mov	r24, r3
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	48 16       	cp	r4, r24
     e24:	59 06       	cpc	r5, r25
     e26:	b0 f4       	brcc	.+44     	; 0xe54 <vfprintf+0x1aa>
     e28:	b7 01       	movw	r22, r14
     e2a:	80 e2       	ldi	r24, 0x20	; 32
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 3d 08 	call	0x107a	; 0x107a <fputc>
     e32:	3a 94       	dec	r3
     e34:	f4 cf       	rjmp	.-24     	; 0xe1e <vfprintf+0x174>
     e36:	f5 01       	movw	r30, r10
     e38:	27 fc       	sbrc	r2, 7
     e3a:	85 91       	lpm	r24, Z+
     e3c:	27 fe       	sbrs	r2, 7
     e3e:	81 91       	ld	r24, Z+
     e40:	5f 01       	movw	r10, r30
     e42:	b7 01       	movw	r22, r14
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 3d 08 	call	0x107a	; 0x107a <fputc>
     e4a:	31 10       	cpse	r3, r1
     e4c:	3a 94       	dec	r3
     e4e:	f1 e0       	ldi	r31, 0x01	; 1
     e50:	4f 1a       	sub	r4, r31
     e52:	51 08       	sbc	r5, r1
     e54:	41 14       	cp	r4, r1
     e56:	51 04       	cpc	r5, r1
     e58:	71 f7       	brne	.-36     	; 0xe36 <vfprintf+0x18c>
     e5a:	e5 c0       	rjmp	.+458    	; 0x1026 <vfprintf+0x37c>
     e5c:	84 36       	cpi	r24, 0x64	; 100
     e5e:	11 f0       	breq	.+4      	; 0xe64 <vfprintf+0x1ba>
     e60:	89 36       	cpi	r24, 0x69	; 105
     e62:	39 f5       	brne	.+78     	; 0xeb2 <vfprintf+0x208>
     e64:	f8 01       	movw	r30, r16
     e66:	27 ff       	sbrs	r18, 7
     e68:	07 c0       	rjmp	.+14     	; 0xe78 <vfprintf+0x1ce>
     e6a:	60 81       	ld	r22, Z
     e6c:	71 81       	ldd	r23, Z+1	; 0x01
     e6e:	82 81       	ldd	r24, Z+2	; 0x02
     e70:	93 81       	ldd	r25, Z+3	; 0x03
     e72:	0c 5f       	subi	r16, 0xFC	; 252
     e74:	1f 4f       	sbci	r17, 0xFF	; 255
     e76:	08 c0       	rjmp	.+16     	; 0xe88 <vfprintf+0x1de>
     e78:	60 81       	ld	r22, Z
     e7a:	71 81       	ldd	r23, Z+1	; 0x01
     e7c:	07 2e       	mov	r0, r23
     e7e:	00 0c       	add	r0, r0
     e80:	88 0b       	sbc	r24, r24
     e82:	99 0b       	sbc	r25, r25
     e84:	0e 5f       	subi	r16, 0xFE	; 254
     e86:	1f 4f       	sbci	r17, 0xFF	; 255
     e88:	2f 76       	andi	r18, 0x6F	; 111
     e8a:	72 2e       	mov	r7, r18
     e8c:	97 ff       	sbrs	r25, 7
     e8e:	09 c0       	rjmp	.+18     	; 0xea2 <vfprintf+0x1f8>
     e90:	90 95       	com	r25
     e92:	80 95       	com	r24
     e94:	70 95       	com	r23
     e96:	61 95       	neg	r22
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	8f 4f       	sbci	r24, 0xFF	; 255
     e9c:	9f 4f       	sbci	r25, 0xFF	; 255
     e9e:	20 68       	ori	r18, 0x80	; 128
     ea0:	72 2e       	mov	r7, r18
     ea2:	2a e0       	ldi	r18, 0x0A	; 10
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	a4 01       	movw	r20, r8
     ea8:	0e 94 75 08 	call	0x10ea	; 0x10ea <__ultoa_invert>
     eac:	a8 2e       	mov	r10, r24
     eae:	a8 18       	sub	r10, r8
     eb0:	44 c0       	rjmp	.+136    	; 0xf3a <vfprintf+0x290>
     eb2:	85 37       	cpi	r24, 0x75	; 117
     eb4:	29 f4       	brne	.+10     	; 0xec0 <vfprintf+0x216>
     eb6:	2f 7e       	andi	r18, 0xEF	; 239
     eb8:	b2 2e       	mov	r11, r18
     eba:	2a e0       	ldi	r18, 0x0A	; 10
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	25 c0       	rjmp	.+74     	; 0xf0a <vfprintf+0x260>
     ec0:	f2 2f       	mov	r31, r18
     ec2:	f9 7f       	andi	r31, 0xF9	; 249
     ec4:	bf 2e       	mov	r11, r31
     ec6:	8f 36       	cpi	r24, 0x6F	; 111
     ec8:	c1 f0       	breq	.+48     	; 0xefa <vfprintf+0x250>
     eca:	18 f4       	brcc	.+6      	; 0xed2 <vfprintf+0x228>
     ecc:	88 35       	cpi	r24, 0x58	; 88
     ece:	79 f0       	breq	.+30     	; 0xeee <vfprintf+0x244>
     ed0:	b4 c0       	rjmp	.+360    	; 0x103a <vfprintf+0x390>
     ed2:	80 37       	cpi	r24, 0x70	; 112
     ed4:	19 f0       	breq	.+6      	; 0xedc <vfprintf+0x232>
     ed6:	88 37       	cpi	r24, 0x78	; 120
     ed8:	21 f0       	breq	.+8      	; 0xee2 <vfprintf+0x238>
     eda:	af c0       	rjmp	.+350    	; 0x103a <vfprintf+0x390>
     edc:	2f 2f       	mov	r18, r31
     ede:	20 61       	ori	r18, 0x10	; 16
     ee0:	b2 2e       	mov	r11, r18
     ee2:	b4 fe       	sbrs	r11, 4
     ee4:	0d c0       	rjmp	.+26     	; 0xf00 <vfprintf+0x256>
     ee6:	8b 2d       	mov	r24, r11
     ee8:	84 60       	ori	r24, 0x04	; 4
     eea:	b8 2e       	mov	r11, r24
     eec:	09 c0       	rjmp	.+18     	; 0xf00 <vfprintf+0x256>
     eee:	24 ff       	sbrs	r18, 4
     ef0:	0a c0       	rjmp	.+20     	; 0xf06 <vfprintf+0x25c>
     ef2:	9f 2f       	mov	r25, r31
     ef4:	96 60       	ori	r25, 0x06	; 6
     ef6:	b9 2e       	mov	r11, r25
     ef8:	06 c0       	rjmp	.+12     	; 0xf06 <vfprintf+0x25c>
     efa:	28 e0       	ldi	r18, 0x08	; 8
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	05 c0       	rjmp	.+10     	; 0xf0a <vfprintf+0x260>
     f00:	20 e1       	ldi	r18, 0x10	; 16
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <vfprintf+0x260>
     f06:	20 e1       	ldi	r18, 0x10	; 16
     f08:	32 e0       	ldi	r19, 0x02	; 2
     f0a:	f8 01       	movw	r30, r16
     f0c:	b7 fe       	sbrs	r11, 7
     f0e:	07 c0       	rjmp	.+14     	; 0xf1e <vfprintf+0x274>
     f10:	60 81       	ld	r22, Z
     f12:	71 81       	ldd	r23, Z+1	; 0x01
     f14:	82 81       	ldd	r24, Z+2	; 0x02
     f16:	93 81       	ldd	r25, Z+3	; 0x03
     f18:	0c 5f       	subi	r16, 0xFC	; 252
     f1a:	1f 4f       	sbci	r17, 0xFF	; 255
     f1c:	06 c0       	rjmp	.+12     	; 0xf2a <vfprintf+0x280>
     f1e:	60 81       	ld	r22, Z
     f20:	71 81       	ldd	r23, Z+1	; 0x01
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 5f       	subi	r16, 0xFE	; 254
     f28:	1f 4f       	sbci	r17, 0xFF	; 255
     f2a:	a4 01       	movw	r20, r8
     f2c:	0e 94 75 08 	call	0x10ea	; 0x10ea <__ultoa_invert>
     f30:	a8 2e       	mov	r10, r24
     f32:	a8 18       	sub	r10, r8
     f34:	fb 2d       	mov	r31, r11
     f36:	ff 77       	andi	r31, 0x7F	; 127
     f38:	7f 2e       	mov	r7, r31
     f3a:	76 fe       	sbrs	r7, 6
     f3c:	0b c0       	rjmp	.+22     	; 0xf54 <vfprintf+0x2aa>
     f3e:	37 2d       	mov	r19, r7
     f40:	3e 7f       	andi	r19, 0xFE	; 254
     f42:	a5 14       	cp	r10, r5
     f44:	50 f4       	brcc	.+20     	; 0xf5a <vfprintf+0x2b0>
     f46:	74 fe       	sbrs	r7, 4
     f48:	0a c0       	rjmp	.+20     	; 0xf5e <vfprintf+0x2b4>
     f4a:	72 fc       	sbrc	r7, 2
     f4c:	08 c0       	rjmp	.+16     	; 0xf5e <vfprintf+0x2b4>
     f4e:	37 2d       	mov	r19, r7
     f50:	3e 7e       	andi	r19, 0xEE	; 238
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <vfprintf+0x2b4>
     f54:	ba 2c       	mov	r11, r10
     f56:	37 2d       	mov	r19, r7
     f58:	03 c0       	rjmp	.+6      	; 0xf60 <vfprintf+0x2b6>
     f5a:	ba 2c       	mov	r11, r10
     f5c:	01 c0       	rjmp	.+2      	; 0xf60 <vfprintf+0x2b6>
     f5e:	b5 2c       	mov	r11, r5
     f60:	34 ff       	sbrs	r19, 4
     f62:	0d c0       	rjmp	.+26     	; 0xf7e <vfprintf+0x2d4>
     f64:	fe 01       	movw	r30, r28
     f66:	ea 0d       	add	r30, r10
     f68:	f1 1d       	adc	r31, r1
     f6a:	80 81       	ld	r24, Z
     f6c:	80 33       	cpi	r24, 0x30	; 48
     f6e:	11 f4       	brne	.+4      	; 0xf74 <vfprintf+0x2ca>
     f70:	39 7e       	andi	r19, 0xE9	; 233
     f72:	09 c0       	rjmp	.+18     	; 0xf86 <vfprintf+0x2dc>
     f74:	32 ff       	sbrs	r19, 2
     f76:	06 c0       	rjmp	.+12     	; 0xf84 <vfprintf+0x2da>
     f78:	b3 94       	inc	r11
     f7a:	b3 94       	inc	r11
     f7c:	04 c0       	rjmp	.+8      	; 0xf86 <vfprintf+0x2dc>
     f7e:	83 2f       	mov	r24, r19
     f80:	86 78       	andi	r24, 0x86	; 134
     f82:	09 f0       	breq	.+2      	; 0xf86 <vfprintf+0x2dc>
     f84:	b3 94       	inc	r11
     f86:	33 fd       	sbrc	r19, 3
     f88:	13 c0       	rjmp	.+38     	; 0xfb0 <vfprintf+0x306>
     f8a:	30 ff       	sbrs	r19, 0
     f8c:	06 c0       	rjmp	.+12     	; 0xf9a <vfprintf+0x2f0>
     f8e:	5a 2c       	mov	r5, r10
     f90:	b3 14       	cp	r11, r3
     f92:	18 f4       	brcc	.+6      	; 0xf9a <vfprintf+0x2f0>
     f94:	53 0c       	add	r5, r3
     f96:	5b 18       	sub	r5, r11
     f98:	b3 2c       	mov	r11, r3
     f9a:	b3 14       	cp	r11, r3
     f9c:	68 f4       	brcc	.+26     	; 0xfb8 <vfprintf+0x30e>
     f9e:	b7 01       	movw	r22, r14
     fa0:	80 e2       	ldi	r24, 0x20	; 32
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	3c 87       	std	Y+12, r19	; 0x0c
     fa6:	0e 94 3d 08 	call	0x107a	; 0x107a <fputc>
     faa:	b3 94       	inc	r11
     fac:	3c 85       	ldd	r19, Y+12	; 0x0c
     fae:	f5 cf       	rjmp	.-22     	; 0xf9a <vfprintf+0x2f0>
     fb0:	b3 14       	cp	r11, r3
     fb2:	10 f4       	brcc	.+4      	; 0xfb8 <vfprintf+0x30e>
     fb4:	3b 18       	sub	r3, r11
     fb6:	01 c0       	rjmp	.+2      	; 0xfba <vfprintf+0x310>
     fb8:	31 2c       	mov	r3, r1
     fba:	34 ff       	sbrs	r19, 4
     fbc:	12 c0       	rjmp	.+36     	; 0xfe2 <vfprintf+0x338>
     fbe:	b7 01       	movw	r22, r14
     fc0:	80 e3       	ldi	r24, 0x30	; 48
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	3c 87       	std	Y+12, r19	; 0x0c
     fc6:	0e 94 3d 08 	call	0x107a	; 0x107a <fputc>
     fca:	3c 85       	ldd	r19, Y+12	; 0x0c
     fcc:	32 ff       	sbrs	r19, 2
     fce:	17 c0       	rjmp	.+46     	; 0xffe <vfprintf+0x354>
     fd0:	31 fd       	sbrc	r19, 1
     fd2:	03 c0       	rjmp	.+6      	; 0xfda <vfprintf+0x330>
     fd4:	88 e7       	ldi	r24, 0x78	; 120
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <vfprintf+0x334>
     fda:	88 e5       	ldi	r24, 0x58	; 88
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	b7 01       	movw	r22, r14
     fe0:	0c c0       	rjmp	.+24     	; 0xffa <vfprintf+0x350>
     fe2:	83 2f       	mov	r24, r19
     fe4:	86 78       	andi	r24, 0x86	; 134
     fe6:	59 f0       	breq	.+22     	; 0xffe <vfprintf+0x354>
     fe8:	31 ff       	sbrs	r19, 1
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <vfprintf+0x346>
     fec:	8b e2       	ldi	r24, 0x2B	; 43
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <vfprintf+0x348>
     ff0:	80 e2       	ldi	r24, 0x20	; 32
     ff2:	37 fd       	sbrc	r19, 7
     ff4:	8d e2       	ldi	r24, 0x2D	; 45
     ff6:	b7 01       	movw	r22, r14
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 3d 08 	call	0x107a	; 0x107a <fputc>
     ffe:	a5 14       	cp	r10, r5
    1000:	38 f4       	brcc	.+14     	; 0x1010 <vfprintf+0x366>
    1002:	b7 01       	movw	r22, r14
    1004:	80 e3       	ldi	r24, 0x30	; 48
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 3d 08 	call	0x107a	; 0x107a <fputc>
    100c:	5a 94       	dec	r5
    100e:	f7 cf       	rjmp	.-18     	; 0xffe <vfprintf+0x354>
    1010:	aa 94       	dec	r10
    1012:	f4 01       	movw	r30, r8
    1014:	ea 0d       	add	r30, r10
    1016:	f1 1d       	adc	r31, r1
    1018:	80 81       	ld	r24, Z
    101a:	b7 01       	movw	r22, r14
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 3d 08 	call	0x107a	; 0x107a <fputc>
    1022:	a1 10       	cpse	r10, r1
    1024:	f5 cf       	rjmp	.-22     	; 0x1010 <vfprintf+0x366>
    1026:	33 20       	and	r3, r3
    1028:	09 f4       	brne	.+2      	; 0x102c <vfprintf+0x382>
    102a:	51 ce       	rjmp	.-862    	; 0xcce <vfprintf+0x24>
    102c:	b7 01       	movw	r22, r14
    102e:	80 e2       	ldi	r24, 0x20	; 32
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 3d 08 	call	0x107a	; 0x107a <fputc>
    1036:	3a 94       	dec	r3
    1038:	f6 cf       	rjmp	.-20     	; 0x1026 <vfprintf+0x37c>
    103a:	f7 01       	movw	r30, r14
    103c:	86 81       	ldd	r24, Z+6	; 0x06
    103e:	97 81       	ldd	r25, Z+7	; 0x07
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <vfprintf+0x39c>
    1042:	8f ef       	ldi	r24, 0xFF	; 255
    1044:	9f ef       	ldi	r25, 0xFF	; 255
    1046:	2c 96       	adiw	r28, 0x0c	; 12
    1048:	e2 e1       	ldi	r30, 0x12	; 18
    104a:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__epilogue_restores__>

0000104e <strnlen_P>:
    104e:	fc 01       	movw	r30, r24
    1050:	05 90       	lpm	r0, Z+
    1052:	61 50       	subi	r22, 0x01	; 1
    1054:	70 40       	sbci	r23, 0x00	; 0
    1056:	01 10       	cpse	r0, r1
    1058:	d8 f7       	brcc	.-10     	; 0x1050 <strnlen_P+0x2>
    105a:	80 95       	com	r24
    105c:	90 95       	com	r25
    105e:	8e 0f       	add	r24, r30
    1060:	9f 1f       	adc	r25, r31
    1062:	08 95       	ret

00001064 <strnlen>:
    1064:	fc 01       	movw	r30, r24
    1066:	61 50       	subi	r22, 0x01	; 1
    1068:	70 40       	sbci	r23, 0x00	; 0
    106a:	01 90       	ld	r0, Z+
    106c:	01 10       	cpse	r0, r1
    106e:	d8 f7       	brcc	.-10     	; 0x1066 <strnlen+0x2>
    1070:	80 95       	com	r24
    1072:	90 95       	com	r25
    1074:	8e 0f       	add	r24, r30
    1076:	9f 1f       	adc	r25, r31
    1078:	08 95       	ret

0000107a <fputc>:
    107a:	0f 93       	push	r16
    107c:	1f 93       	push	r17
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	fb 01       	movw	r30, r22
    1084:	23 81       	ldd	r18, Z+3	; 0x03
    1086:	21 fd       	sbrc	r18, 1
    1088:	03 c0       	rjmp	.+6      	; 0x1090 <fputc+0x16>
    108a:	8f ef       	ldi	r24, 0xFF	; 255
    108c:	9f ef       	ldi	r25, 0xFF	; 255
    108e:	28 c0       	rjmp	.+80     	; 0x10e0 <fputc+0x66>
    1090:	22 ff       	sbrs	r18, 2
    1092:	16 c0       	rjmp	.+44     	; 0x10c0 <fputc+0x46>
    1094:	46 81       	ldd	r20, Z+6	; 0x06
    1096:	57 81       	ldd	r21, Z+7	; 0x07
    1098:	24 81       	ldd	r18, Z+4	; 0x04
    109a:	35 81       	ldd	r19, Z+5	; 0x05
    109c:	42 17       	cp	r20, r18
    109e:	53 07       	cpc	r21, r19
    10a0:	44 f4       	brge	.+16     	; 0x10b2 <fputc+0x38>
    10a2:	a0 81       	ld	r26, Z
    10a4:	b1 81       	ldd	r27, Z+1	; 0x01
    10a6:	9d 01       	movw	r18, r26
    10a8:	2f 5f       	subi	r18, 0xFF	; 255
    10aa:	3f 4f       	sbci	r19, 0xFF	; 255
    10ac:	31 83       	std	Z+1, r19	; 0x01
    10ae:	20 83       	st	Z, r18
    10b0:	8c 93       	st	X, r24
    10b2:	26 81       	ldd	r18, Z+6	; 0x06
    10b4:	37 81       	ldd	r19, Z+7	; 0x07
    10b6:	2f 5f       	subi	r18, 0xFF	; 255
    10b8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ba:	37 83       	std	Z+7, r19	; 0x07
    10bc:	26 83       	std	Z+6, r18	; 0x06
    10be:	10 c0       	rjmp	.+32     	; 0x10e0 <fputc+0x66>
    10c0:	eb 01       	movw	r28, r22
    10c2:	09 2f       	mov	r16, r25
    10c4:	18 2f       	mov	r17, r24
    10c6:	00 84       	ldd	r0, Z+8	; 0x08
    10c8:	f1 85       	ldd	r31, Z+9	; 0x09
    10ca:	e0 2d       	mov	r30, r0
    10cc:	09 95       	icall
    10ce:	89 2b       	or	r24, r25
    10d0:	e1 f6       	brne	.-72     	; 0x108a <fputc+0x10>
    10d2:	8e 81       	ldd	r24, Y+6	; 0x06
    10d4:	9f 81       	ldd	r25, Y+7	; 0x07
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	9f 83       	std	Y+7, r25	; 0x07
    10da:	8e 83       	std	Y+6, r24	; 0x06
    10dc:	81 2f       	mov	r24, r17
    10de:	90 2f       	mov	r25, r16
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	08 95       	ret

000010ea <__ultoa_invert>:
    10ea:	fa 01       	movw	r30, r20
    10ec:	aa 27       	eor	r26, r26
    10ee:	28 30       	cpi	r18, 0x08	; 8
    10f0:	51 f1       	breq	.+84     	; 0x1146 <__ultoa_invert+0x5c>
    10f2:	20 31       	cpi	r18, 0x10	; 16
    10f4:	81 f1       	breq	.+96     	; 0x1156 <__ultoa_invert+0x6c>
    10f6:	e8 94       	clt
    10f8:	6f 93       	push	r22
    10fa:	6e 7f       	andi	r22, 0xFE	; 254
    10fc:	6e 5f       	subi	r22, 0xFE	; 254
    10fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1100:	8f 4f       	sbci	r24, 0xFF	; 255
    1102:	9f 4f       	sbci	r25, 0xFF	; 255
    1104:	af 4f       	sbci	r26, 0xFF	; 255
    1106:	b1 e0       	ldi	r27, 0x01	; 1
    1108:	3e d0       	rcall	.+124    	; 0x1186 <__ultoa_invert+0x9c>
    110a:	b4 e0       	ldi	r27, 0x04	; 4
    110c:	3c d0       	rcall	.+120    	; 0x1186 <__ultoa_invert+0x9c>
    110e:	67 0f       	add	r22, r23
    1110:	78 1f       	adc	r23, r24
    1112:	89 1f       	adc	r24, r25
    1114:	9a 1f       	adc	r25, r26
    1116:	a1 1d       	adc	r26, r1
    1118:	68 0f       	add	r22, r24
    111a:	79 1f       	adc	r23, r25
    111c:	8a 1f       	adc	r24, r26
    111e:	91 1d       	adc	r25, r1
    1120:	a1 1d       	adc	r26, r1
    1122:	6a 0f       	add	r22, r26
    1124:	71 1d       	adc	r23, r1
    1126:	81 1d       	adc	r24, r1
    1128:	91 1d       	adc	r25, r1
    112a:	a1 1d       	adc	r26, r1
    112c:	20 d0       	rcall	.+64     	; 0x116e <__ultoa_invert+0x84>
    112e:	09 f4       	brne	.+2      	; 0x1132 <__ultoa_invert+0x48>
    1130:	68 94       	set
    1132:	3f 91       	pop	r19
    1134:	2a e0       	ldi	r18, 0x0A	; 10
    1136:	26 9f       	mul	r18, r22
    1138:	11 24       	eor	r1, r1
    113a:	30 19       	sub	r19, r0
    113c:	30 5d       	subi	r19, 0xD0	; 208
    113e:	31 93       	st	Z+, r19
    1140:	de f6       	brtc	.-74     	; 0x10f8 <__ultoa_invert+0xe>
    1142:	cf 01       	movw	r24, r30
    1144:	08 95       	ret
    1146:	46 2f       	mov	r20, r22
    1148:	47 70       	andi	r20, 0x07	; 7
    114a:	40 5d       	subi	r20, 0xD0	; 208
    114c:	41 93       	st	Z+, r20
    114e:	b3 e0       	ldi	r27, 0x03	; 3
    1150:	0f d0       	rcall	.+30     	; 0x1170 <__ultoa_invert+0x86>
    1152:	c9 f7       	brne	.-14     	; 0x1146 <__ultoa_invert+0x5c>
    1154:	f6 cf       	rjmp	.-20     	; 0x1142 <__ultoa_invert+0x58>
    1156:	46 2f       	mov	r20, r22
    1158:	4f 70       	andi	r20, 0x0F	; 15
    115a:	40 5d       	subi	r20, 0xD0	; 208
    115c:	4a 33       	cpi	r20, 0x3A	; 58
    115e:	18 f0       	brcs	.+6      	; 0x1166 <__ultoa_invert+0x7c>
    1160:	49 5d       	subi	r20, 0xD9	; 217
    1162:	31 fd       	sbrc	r19, 1
    1164:	40 52       	subi	r20, 0x20	; 32
    1166:	41 93       	st	Z+, r20
    1168:	02 d0       	rcall	.+4      	; 0x116e <__ultoa_invert+0x84>
    116a:	a9 f7       	brne	.-22     	; 0x1156 <__ultoa_invert+0x6c>
    116c:	ea cf       	rjmp	.-44     	; 0x1142 <__ultoa_invert+0x58>
    116e:	b4 e0       	ldi	r27, 0x04	; 4
    1170:	a6 95       	lsr	r26
    1172:	97 95       	ror	r25
    1174:	87 95       	ror	r24
    1176:	77 95       	ror	r23
    1178:	67 95       	ror	r22
    117a:	ba 95       	dec	r27
    117c:	c9 f7       	brne	.-14     	; 0x1170 <__ultoa_invert+0x86>
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	61 05       	cpc	r22, r1
    1182:	71 05       	cpc	r23, r1
    1184:	08 95       	ret
    1186:	9b 01       	movw	r18, r22
    1188:	ac 01       	movw	r20, r24
    118a:	0a 2e       	mov	r0, r26
    118c:	06 94       	lsr	r0
    118e:	57 95       	ror	r21
    1190:	47 95       	ror	r20
    1192:	37 95       	ror	r19
    1194:	27 95       	ror	r18
    1196:	ba 95       	dec	r27
    1198:	c9 f7       	brne	.-14     	; 0x118c <__ultoa_invert+0xa2>
    119a:	62 0f       	add	r22, r18
    119c:	73 1f       	adc	r23, r19
    119e:	84 1f       	adc	r24, r20
    11a0:	95 1f       	adc	r25, r21
    11a2:	a0 1d       	adc	r26, r0
    11a4:	08 95       	ret

000011a6 <__prologue_saves__>:
    11a6:	2f 92       	push	r2
    11a8:	3f 92       	push	r3
    11aa:	4f 92       	push	r4
    11ac:	5f 92       	push	r5
    11ae:	6f 92       	push	r6
    11b0:	7f 92       	push	r7
    11b2:	8f 92       	push	r8
    11b4:	9f 92       	push	r9
    11b6:	af 92       	push	r10
    11b8:	bf 92       	push	r11
    11ba:	cf 92       	push	r12
    11bc:	df 92       	push	r13
    11be:	ef 92       	push	r14
    11c0:	ff 92       	push	r15
    11c2:	0f 93       	push	r16
    11c4:	1f 93       	push	r17
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	ca 1b       	sub	r28, r26
    11d0:	db 0b       	sbc	r29, r27
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	09 94       	ijmp

000011de <__epilogue_restores__>:
    11de:	2a 88       	ldd	r2, Y+18	; 0x12
    11e0:	39 88       	ldd	r3, Y+17	; 0x11
    11e2:	48 88       	ldd	r4, Y+16	; 0x10
    11e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    11e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    11e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    11ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    11ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    11ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    11f0:	b9 84       	ldd	r11, Y+9	; 0x09
    11f2:	c8 84       	ldd	r12, Y+8	; 0x08
    11f4:	df 80       	ldd	r13, Y+7	; 0x07
    11f6:	ee 80       	ldd	r14, Y+6	; 0x06
    11f8:	fd 80       	ldd	r15, Y+5	; 0x05
    11fa:	0c 81       	ldd	r16, Y+4	; 0x04
    11fc:	1b 81       	ldd	r17, Y+3	; 0x03
    11fe:	aa 81       	ldd	r26, Y+2	; 0x02
    1200:	b9 81       	ldd	r27, Y+1	; 0x01
    1202:	ce 0f       	add	r28, r30
    1204:	d1 1d       	adc	r29, r1
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	ed 01       	movw	r28, r26
    1212:	08 95       	ret

00001214 <_exit>:
    1214:	f8 94       	cli

00001216 <__stop_program>:
    1216:	ff cf       	rjmp	.-2      	; 0x1216 <__stop_program>
